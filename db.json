{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/black-blue/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/gitment.min.css","path":"css/gitment.min.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/loading-style.css","path":"css/loading-style.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/showshare.css","path":"css/showshare.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/qq.png","path":"img/qq.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/TweenMax.js","path":"js/TweenMax.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/pace.js","path":"js/pace.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"source/images/docker/pasted-1.png","path":"images/docker/pasted-1.png","modified":0,"renderable":0},{"_id":"source/images/docker/pasted-3.png","path":"images/docker/pasted-3.png","modified":0,"renderable":0},{"_id":"source/images/hexo/pasted-1.png","path":"images/hexo/pasted-1.png","modified":0,"renderable":0},{"_id":"source/images/hexo/pasted-2.png","path":"images/hexo/pasted-2.png","modified":0,"renderable":0},{"_id":"source/images/hexo/pasted-4.png","path":"images/hexo/pasted-4.png","modified":0,"renderable":0},{"_id":"themes/black-blue/source/img/touxiang.jpg","path":"img/touxiang.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":0,"renderable":1},{"_id":"source/images/about/touxiang.jpg","path":"images/about/touxiang.jpg","modified":0,"renderable":0},{"_id":"source/images/about/my002.jpg","path":"images/about/my002.jpg","modified":0,"renderable":0},{"_id":"source/images/docker/pasted-0.png","path":"images/docker/pasted-0.png","modified":0,"renderable":0},{"_id":"source/images/docker/pasted-2.png","path":"images/docker/pasted-2.png","modified":0,"renderable":0},{"_id":"source/images/hexo/pasted-0.png","path":"images/hexo/pasted-0.png","modified":0,"renderable":0},{"_id":"themes/black-blue/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/background/bg11.jpg","path":"background/bg11.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":0,"renderable":1},{"_id":"source/images/hexo/pasted-3.png","path":"images/hexo/pasted-3.png","modified":0,"renderable":0},{"_id":"source/images/hexo/pasted-5.png","path":"images/hexo/pasted-5.png","modified":0,"renderable":0},{"_id":"source/images/hexo/pasted-6.png","path":"images/hexo/pasted-6.png","modified":0,"renderable":0},{"_id":"source/images/hexo/pasted-7.png","path":"images/hexo/pasted-7.png","modified":0,"renderable":0},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/bg1.jpg","path":"img/bg1.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/black-blue/_config.yml","hash":"6c377501c144a13372cc98bd110b1a137d693b8c","modified":1536231821605},{"_id":"themes/black-blue/.gitignore","hash":"b0131abfdb4235c2baefdc3d08bd5bde3851f645","modified":1536203748172},{"_id":"themes/black-blue/README.md","hash":"2a8b1f207126342c6441491dc1863ced3a6ccad9","modified":1536197142647},{"_id":"themes/black-blue/package.json","hash":"9a0284a7a5c55adbe4de657dfe725924c82eacc3","modified":1536197142778},{"_id":"themes/black-blue/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1536197142652},{"_id":"themes/black-blue/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1536197142655},{"_id":"themes/black-blue/languages/en.yml","hash":"4eaeb91a1326a81f908b23a6f9c6989ade8068e5","modified":1536197142657},{"_id":"themes/black-blue/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1536197142660},{"_id":"themes/black-blue/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1536197142662},{"_id":"themes/black-blue/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1536197142666},{"_id":"themes/black-blue/languages/zh-Hans.yml","hash":"a4d4447e31c03d958880a5cd98ef3ca22101a5a3","modified":1536197142664},{"_id":"themes/black-blue/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1536197142668},{"_id":"themes/black-blue/languages/zh.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1536197142670},{"_id":"themes/black-blue/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1536197142781},{"_id":"themes/black-blue/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1536197142759},{"_id":"themes/black-blue/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1536197142762},{"_id":"themes/black-blue/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1536197142764},{"_id":"themes/black-blue/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1536197142766},{"_id":"themes/black-blue/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1536197142768},{"_id":"themes/black-blue/layout/plugins.swig","hash":"4c978bfbde006b6e3b82f4931541fada9381806d","modified":1536197142771},{"_id":"themes/black-blue/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1536197142773},{"_id":"source/_drafts/index.md","hash":"aaeb6bac18fd86f2957a7ea3edd6fc93c711259d","modified":1536233149181},{"_id":"themes/black-blue/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1536197142775},{"_id":"source/_posts/Centos7上安装docker.md","hash":"8675347cbd943df7d8786009b808221388c2d6b4","modified":1536231040125},{"_id":"source/_posts/dsbasic.md","hash":"5ff91ff1f1ab8e7a4012707c12bf73a6c1790c52","modified":1536230137256},{"_id":"source/_posts/dslock.md","hash":"3e981e3b5894529c28cecba5b53a353793dbd55a","modified":1536230137274},{"_id":"source/_posts/gitlab-ce.md","hash":"695fd8306ff0cf43bf804576fdcb225b30a674e2","modified":1536231564544},{"_id":"source/_posts/gitlab-ci.md","hash":"02c21e703d4b2e8350638ecc15c51b21f2130ea5","modified":1536231463709},{"_id":"source/_posts/hexo-gitlab.md","hash":"95aa02d83498e80d7804c5c35e3934eabec4ccb8","modified":1536231046593},{"_id":"source/_posts/markdown.md","hash":"ab3839bf5236ce39e383800686e56f7e835a1d1b","modified":1536231594841},{"_id":"source/_posts/phoenix.md","hash":"8e5329c2db87cee582edf3a23e1e7cd66af08881","modified":1536232092319},{"_id":"source/_posts/windows.md","hash":"d3fa924882ef3625058a6fd8306681d044202047","modified":1536231315643},{"_id":"source/_posts/zookeeper.md","hash":"68a0d762c5771e7dbb3a3008a231e21cde095944","modified":1536232100810},{"_id":"source/about/index.md","hash":"7d888c0756624a1dff74ec117e5b32645cbfd1ac","modified":1536214530053},{"_id":"source/archives/index.md","hash":"21f4b979d536290e0b0f27d5fdd67e0d212695eb","modified":1521972941641},{"_id":"source/categories/index.md","hash":"3f60e53ed148f211854ec5fe50a149427cbe0591","modified":1521862533655},{"_id":"source/schedule/index.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1521973533182},{"_id":"source/tags/index.md","hash":"2bbf125a11ebcfc67990d8a2ebffb0636d365529","modified":1521862522638},{"_id":"themes/black-blue/source/background/bg-1.jpg","hash":"cf0e1d0201305315768569224381681f49f54bd3","modified":1536217376837},{"_id":"themes/black-blue/source/css/gitment.css","hash":"4e10aca6689acb1d000fa52020ad3a89acd2dbdb","modified":1536197142793},{"_id":"themes/black-blue/source/css/gitment.min.css","hash":"5c6e826b17fcb766b5bea5e9adcf5c5527cf74c8","modified":1536197142795},{"_id":"themes/black-blue/source/css/loading-style.css","hash":"6535ef9a22f9791c87033fd914938473952831aa","modified":1536197142797},{"_id":"themes/black-blue/source/css/showshare.css","hash":"13d17317db6857b8c3628974d1e4afdc4b1e1a1b","modified":1536197142804},{"_id":"themes/black-blue/source/css/style.css","hash":"67a5038e87ed12baff39aef35bdf36653f8f6afe","modified":1536197142806},{"_id":"themes/black-blue/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536197142809},{"_id":"themes/black-blue/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536197142811},{"_id":"themes/black-blue/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536197142814},{"_id":"themes/black-blue/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536197142816},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536197142818},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536197142821},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.css","hash":"89aa9b06961a0c8fa0aa6e4cea9a95e7f6d4d5a1","modified":1536197142837},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.js","hash":"422bd03dda3be683717d7cf940eead7a072fe12e","modified":1536197142840},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1536197142842},{"_id":"themes/black-blue/source/img/bg.jpg","hash":"cf0e1d0201305315768569224381681f49f54bd3","modified":1536217376837},{"_id":"themes/black-blue/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1536197142882},{"_id":"themes/black-blue/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1536197142884},{"_id":"themes/black-blue/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1536197142887},{"_id":"themes/black-blue/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1536197142889},{"_id":"themes/black-blue/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1536197142894},{"_id":"themes/black-blue/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1536197142896},{"_id":"themes/black-blue/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1536197142898},{"_id":"themes/black-blue/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1536197142901},{"_id":"themes/black-blue/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1536197142903},{"_id":"themes/black-blue/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1536197142905},{"_id":"themes/black-blue/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1536197142907},{"_id":"themes/black-blue/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1536197142909},{"_id":"themes/black-blue/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1536197142911},{"_id":"themes/black-blue/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1536197142913},{"_id":"themes/black-blue/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1536197142915},{"_id":"themes/black-blue/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1536197142917},{"_id":"themes/black-blue/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1536197142920},{"_id":"themes/black-blue/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1536197142922},{"_id":"themes/black-blue/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1536197142924},{"_id":"themes/black-blue/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1536197142926},{"_id":"themes/black-blue/source/js/TweenMax.js","hash":"4ac5bb002414aa0dbbb57c867845fa057a9c5453","modified":1536197142935},{"_id":"themes/black-blue/source/js/clipboard.min.js","hash":"7f047155fccd6f375db17d6d44e1f4637feb3b04","modified":1536197142940},{"_id":"themes/black-blue/source/js/embed.js","hash":"74ae18956d0037ff76e592f54db1eb1fa682875c","modified":1536197142943},{"_id":"themes/black-blue/source/js/instagram.js","hash":"35d037fed53f5d3b6ece63b1b98ba3b2f9ccbf78","modified":1536197142945},{"_id":"themes/black-blue/source/js/jquery.lazyload.js","hash":"6f4a6850315cabbab8908473fe04f8bd2011299b","modified":1536197142947},{"_id":"themes/black-blue/source/js/main.js","hash":"f6226d5a27cb556dccc8d2ed85b1b228675a119f","modified":1536197142950},{"_id":"themes/black-blue/source/js/mobile.js","hash":"ebb80e3e6da9146f05ba0528a378c583b47e37c1","modified":1536197142952},{"_id":"themes/black-blue/source/js/pace.js","hash":"aadc3b4644ac1b1a7849991ffd53e220b55ff6e5","modified":1536197142954},{"_id":"themes/black-blue/source/js/pc.js","hash":"46db69363993695b6714a04e503624ad054da19e","modified":1536197142957},{"_id":"themes/black-blue/source/js/plugins.js","hash":"72b87cbf6170f6cbb69bc9b20a7bc494667b514c","modified":1536197142959},{"_id":"themes/black-blue/layout/_partial/after-footer.ejs","hash":"afb7b469317607beca9b1ffbb7982f13887a838d","modified":1536197142674},{"_id":"themes/black-blue/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1536197142682},{"_id":"themes/black-blue/layout/_partial/archive.ejs","hash":"205d21a8be91d6aa99583c4a7572c6b326497960","modified":1536197142684},{"_id":"themes/black-blue/layout/_partial/article.ejs","hash":"3373fbf7b8258b4d73563c345a53099a19615924","modified":1536197142686},{"_id":"themes/black-blue/layout/_partial/background.ejs","hash":"054cbde2b775dd05f942e62d3ba5374ff8c71fea","modified":1536197142688},{"_id":"themes/black-blue/layout/_partial/bodybackground.ejs","hash":"ad24b949bbe4fadf7549be3d1df76fc7444d1adc","modified":1536197142691},{"_id":"themes/black-blue/layout/_partial/case.swig","hash":"6b3d48c86b38a52b997f4967205f78e7e71848c4","modified":1536197142693},{"_id":"themes/black-blue/layout/_partial/footer.ejs","hash":"fafb4ea755fd4b6e4093ddd62e441e1e8301f265","modified":1536215164109},{"_id":"themes/black-blue/layout/_partial/head.ejs","hash":"3134d5a3cff62a818a9e73bddf39fdc9a0fc1886","modified":1536197142705},{"_id":"themes/black-blue/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1536197142708},{"_id":"themes/black-blue/layout/_partial/hide-labels.ejs","hash":"61989603078f069fb9a4b68b9c16e221d8a80c14","modified":1536197142710},{"_id":"themes/black-blue/layout/_partial/jquery.ejs","hash":"9f05e92ef912421ac9fb71f41d916269d09c9133","modified":1536197142712},{"_id":"themes/black-blue/layout/_partial/left-col.ejs","hash":"7b1596a15b73e31b8d6171bfa0a99e5cc3bd8901","modified":1536197142714},{"_id":"themes/black-blue/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1536197142716},{"_id":"themes/black-blue/layout/_partial/mobile-nav.ejs","hash":"deb5c373da4d41064abcb2b50389de42970d0150","modified":1536197142718},{"_id":"themes/black-blue/layout/_partial/page.ejs","hash":"7657efab4010092f62fc44b1c7a8f8936af79ec3","modified":1536197142720},{"_id":"themes/black-blue/layout/_partial/plugin.swig","hash":"b8539477a33580d9e493365f16e7b7d40afc5e5c","modified":1536197142723},{"_id":"themes/black-blue/layout/_partial/post-nav-button.ejs","hash":"9d97c3cb3314c00f96c73cf8daafbac9b75f84bb","modified":1536197142725},{"_id":"themes/black-blue/layout/_partial/scrolling-button.ejs","hash":"40573748d4a14530e6052836ef8a7063e6486d45","modified":1536197142743},{"_id":"themes/black-blue/layout/_partial/theme.swig","hash":"96ae0d2429f712faf2964ed74fbeffc395accac2","modified":1536197142752},{"_id":"themes/black-blue/layout/_partial/toc.ejs","hash":"1646bc7a0be00c279ecfafffc854d49b2edb57a2","modified":1536197142755},{"_id":"themes/black-blue/layout/_partial/work.swig","hash":"7ec7e427bb700ed1ac4f04bc2872645f7c4908e9","modified":1536197142757},{"_id":"source/images/docker/pasted-1.png","hash":"0ba386593d0b39a546d4b260b2719788b4f594a7","modified":1535604366409},{"_id":"source/images/docker/pasted-3.png","hash":"c81f0f5e730c52709061954657dfd8229dc60b8c","modified":1535605927964},{"_id":"source/images/hexo/pasted-1.png","hash":"f8a068f86200ba4ba0730ed0b1fa886252c6bbdb","modified":1535607362012},{"_id":"source/images/hexo/pasted-2.png","hash":"e02369f21e9f9cc5ff83f85dd71de06bdb7022cd","modified":1535607588549},{"_id":"source/images/hexo/pasted-4.png","hash":"0cb2bae5aaf691b4e696d5be6a75ed6294ec809d","modified":1535608174158},{"_id":"themes/black-blue/source/img/touxiang.jpg","hash":"062794f4060207ce0f7ec0bb15aa767bc116510e","modified":1536198483755},{"_id":"themes/black-blue/source/js/TweenMax.min.js","hash":"2207f42520d5c548702511180e500c3e077605f8","modified":1536197142937},{"_id":"source/images/about/touxiang.jpg","hash":"062794f4060207ce0f7ec0bb15aa767bc116510e","modified":1536198483755},{"_id":"source/images/about/my002.jpg","hash":"8077aede7dacb0fb708c6b499dee190c9096fcf3","modified":1521972582950},{"_id":"source/images/docker/pasted-0.png","hash":"2df71e5c6fac84f5f643d13ad83d90c53617e4e3","modified":1535604218773},{"_id":"source/images/docker/pasted-2.png","hash":"3f48ae53397c5a9d95961e6ececb63cd8e6e7353","modified":1535605818156},{"_id":"source/images/hexo/pasted-0.png","hash":"b4922d07ab8cf7d52a027944d9bbd243de322299","modified":1535606743227},{"_id":"themes/black-blue/source/background/bg-11.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1536197142786},{"_id":"themes/black-blue/source/background/bg11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1536197142790},{"_id":"themes/black-blue/source/css/pace/pace-theme-flash.css","hash":"9b9c20fd0624745cc20d7028b54c8b8301d81629","modified":1536197142801},{"_id":"themes/black-blue/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536197142823},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1536197142826},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1536197142828},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1536197142830},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1536197142833},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1536197142835},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1536197142846},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1536197142849},{"_id":"themes/black-blue/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"4bbd22670cd359d05e78c186a98288fb21fbf092","modified":1536197142932},{"_id":"themes/black-blue/layout/_partial/analytics/baidu-analytics.ejs","hash":"ef42cd48d140ae81433c2f54b2b70387a09e5e5c","modified":1536197142677},{"_id":"themes/black-blue/layout/_partial/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1536197142680},{"_id":"themes/black-blue/layout/_partial/comments/changyan.ejs","hash":"e154aa36aa78e396a63b119b5fc34061b5813833","modified":1536197142696},{"_id":"themes/black-blue/layout/_partial/comments/disqus.ejs","hash":"ded58c9329c2abbf89ac13eeb83c3924637f852c","modified":1536197142698},{"_id":"themes/black-blue/layout/_partial/comments/gitment.ejs","hash":"732d57f6e87e6db6350cb8144902ed846c27d74e","modified":1536197142700},{"_id":"themes/black-blue/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1536197142730},{"_id":"themes/black-blue/layout/_partial/post/TipTitle.ejs","hash":"bcc474b49972f8d0a4856a3ff62b56f03e0b2e03","modified":1536197142728},{"_id":"themes/black-blue/layout/_partial/post/date.ejs","hash":"d0bcf3e2645300519b710860137e6fbb0340c7c8","modified":1536197142732},{"_id":"themes/black-blue/layout/_partial/post/loading.ejs","hash":"ba96f9dd60069b3ac2a332c45b1df82c0bf68f21","modified":1536197142734},{"_id":"themes/black-blue/layout/_partial/post/nav.ejs","hash":"549d1125e68c15dc6dcacb6d2820bfbf09fb19a0","modified":1536197142736},{"_id":"themes/black-blue/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1536197142739},{"_id":"themes/black-blue/layout/_partial/post/title.ejs","hash":"becf55d3d1ce42369ab046f1591e9d89a2240375","modified":1536197142741},{"_id":"themes/black-blue/layout/_partial/share/baidu-share.ejs","hash":"136d1ffb6176e220e034a601df9c86f005fd9b4f","modified":1536197142745},{"_id":"themes/black-blue/layout/_partial/share/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1536197142748},{"_id":"themes/black-blue/layout/_partial/share/showshare.ejs","hash":"94a473e73cbe1f18ddd264c1ead93124b234b0d1","modified":1536222337867},{"_id":"source/images/hexo/pasted-3.png","hash":"2bbfd69f03f2166666bc677f08e78b7f82850439","modified":1535607920879},{"_id":"source/images/hexo/pasted-5.png","hash":"c2eba6dd16a101ecc2e25ae7481567ece68a98f9","modified":1535614302040},{"_id":"source/images/hexo/pasted-6.png","hash":"d20f2f43bef44e20a4106d6c73f0f8a761997a4f","modified":1535614534118},{"_id":"source/images/hexo/pasted-7.png","hash":"273aef54d8d59a1238298a1b9edb99d493cc5dd8","modified":1535614754436},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1536197142857},{"_id":"themes/black-blue/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1536197142854},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1536197142868},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1536197142871},{"_id":"themes/black-blue/source/js/404/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1536197142930},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1536197142866},{"_id":"themes/black-blue/source/img/bg1.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1536197142880},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1536197142862}],"Category":[{"name":"玩转框架","_id":"cjlqgwfta0004estj4urpqog5"},{"name":"研发工具","_id":"cjlqgwfuf000bestjmzl19nr2"},{"name":"分布式架构","_id":"cjlqgwfuw000festjz7dj6wam"},{"name":"大数据","parent":"cjlqgwfta0004estj4urpqog5","_id":"cjlqgwfve000qestj50c7pgzy"},{"name":"语法手册","_id":"cjlqgwfvi000uestjg68oah6o"},{"name":"学习笔记","_id":"cjlqgxv640018estj5skqatdo"}],"Data":[],"Page":[{"_content":"\n    关于作者\n\n<center> <img src=\"/images/about/my002.jpg\" width=\"30%\"  height=\"40%\"/>\n</center >\n<center> 如果你像程序员一样工作，你就是程序员。   \n         如果你像架构师一样工作，你就是架构师！</center >\n\n       联系方式\n\n#### QQ: 1183770835\n\n#### Email: chuncumt@163.com\n","source":"about/index.md","raw":"\n    关于作者\n\n<center> <img src=\"/images/about/my002.jpg\" width=\"30%\"  height=\"40%\"/>\n</center >\n<center> 如果你像程序员一样工作，你就是程序员。   \n         如果你像架构师一样工作，你就是架构师！</center >\n\n       联系方式\n\n#### QQ: 1183770835\n\n#### Email: chuncumt@163.com\n","date":"2018-09-06T06:15:30.066Z","updated":"2018-09-06T06:15:30.053Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjlqgwft50001estjpafgcxx7","content":"<pre><code>关于作者\n</code></pre><p><center> <img src=\"/images/about/my002.jpg\" width=\"30%\"  height=\"40%\"/><br></center ></p>\n<p><center> 如果你像程序员一样工作，你就是程序员。<br>         如果你像架构师一样工作，你就是架构师！</center ></p>\n<pre><code>联系方式\n</code></pre><h4 id=\"QQ-1183770835\"><a href=\"#QQ-1183770835\" class=\"headerlink\" title=\"QQ: 1183770835\"></a>QQ: 1183770835</h4><h4 id=\"Email-chuncumt-163-com\"><a href=\"#Email-chuncumt-163-com\" class=\"headerlink\" title=\"Email: chuncumt@163.com\"></a>Email: <a href=\"mailto:chuncumt@163.com\">chuncumt@163.com</a></h4>","site":{"data":{}},"excerpt":"","more":"<pre><code>关于作者\n</code></pre><p><center> <img src=\"/images/about/my002.jpg\" width=\"30%\"  height=\"40%\"/><br></center ></p>\n<p><center> 如果你像程序员一样工作，你就是程序员。<br>         如果你像架构师一样工作，你就是架构师！</center ></p>\n<pre><code>联系方式\n</code></pre><h4 id=\"QQ-1183770835\"><a href=\"#QQ-1183770835\" class=\"headerlink\" title=\"QQ: 1183770835\"></a>QQ: 1183770835</h4><h4 id=\"Email-chuncumt-163-com\"><a href=\"#Email-chuncumt-163-com\" class=\"headerlink\" title=\"Email: chuncumt@163.com\"></a>Email: <a href=\"mailto:chuncumt@163.com\">chuncumt@163.com</a></h4>"},{"_content":"\n    关于作者\n\n<img src=\"/images/my002.jpg\" width=\"30%\"  height=\"40%\"/>\n\n<center> 如果你像程序员一样工作，你就是程序员。   \n         如果你像架构师一样工作，你就是架构师！</center >\n\n       联系方式\n\n#### QQ: 1183770835\n\n#### Email: chuncumt@163.com\n","source":"archives/index.md","raw":"\n    关于作者\n\n<img src=\"/images/my002.jpg\" width=\"30%\"  height=\"40%\"/>\n\n<center> 如果你像程序员一样工作，你就是程序员。   \n         如果你像架构师一样工作，你就是架构师！</center >\n\n       联系方式\n\n#### QQ: 1183770835\n\n#### Email: chuncumt@163.com\n","date":"2018-03-25T10:18:41.413Z","updated":"2018-03-25T10:15:41.641Z","path":"archives/index.html","title":"","comments":1,"layout":"page","_id":"cjlqgwft80003estjorciqxcz","content":"<pre><code>关于作者\n</code></pre><p><img src=\"/images/my002.jpg\" width=\"30%\"  height=\"40%\"/></p>\n<p><center> 如果你像程序员一样工作，你就是程序员。<br>         如果你像架构师一样工作，你就是架构师！</center ></p>\n<pre><code>联系方式\n</code></pre><h4 id=\"QQ-1183770835\"><a href=\"#QQ-1183770835\" class=\"headerlink\" title=\"QQ: 1183770835\"></a>QQ: 1183770835</h4><h4 id=\"Email-chuncumt-163-com\"><a href=\"#Email-chuncumt-163-com\" class=\"headerlink\" title=\"Email: chuncumt@163.com\"></a>Email: <a href=\"mailto:chuncumt@163.com\">chuncumt@163.com</a></h4>","site":{"data":{}},"excerpt":"","more":"<pre><code>关于作者\n</code></pre><p><img src=\"/images/my002.jpg\" width=\"30%\"  height=\"40%\"/></p>\n<p><center> 如果你像程序员一样工作，你就是程序员。<br>         如果你像架构师一样工作，你就是架构师！</center ></p>\n<pre><code>联系方式\n</code></pre><h4 id=\"QQ-1183770835\"><a href=\"#QQ-1183770835\" class=\"headerlink\" title=\"QQ: 1183770835\"></a>QQ: 1183770835</h4><h4 id=\"Email-chuncumt-163-com\"><a href=\"#Email-chuncumt-163-com\" class=\"headerlink\" title=\"Email: chuncumt@163.com\"></a>Email: <a href=\"mailto:chuncumt@163.com\">chuncumt@163.com</a></h4>"},{"title":"Categories","date":"2018-03-24T03:35:33.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-03-24 11:35:33\n---\n","updated":"2018-03-24T03:35:33.655Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjlqgwfte0006estjclpf8ij8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"schedule/index.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","date":"2018-03-25T10:25:33.189Z","updated":"2018-03-25T10:25:33.182Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjlqgwfth0008estjgm01ohci","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Tags","date":"2018-03-24T03:35:22.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-03-24 11:35:22\n---\n","updated":"2018-03-24T03:35:22.638Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjlqgwfw50017estj8xgpvffd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java工程师成神之路","date":"2018-03-30T03:14:00.000Z","_content":"Java工程师成神之路\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### **一、基础篇**\n#### 1.1、Java基础 \n* 面向对象的特征：继承、封装和多态\n* final, finally, finalize 的区别\n* Exception、Error、运行时异常与一般异常有何异同\n* 请写出5种常见到的runtime exception\n* int 和 Integer 有什么区别，Integer的值缓存范围\n* 包装类，装箱和拆箱\n* String、StringBuilder、StringBuffer\n* 重载和重写的区别\n* 抽象类和接口有什么区别\n* 说说反射的用途及实现\n* 说说自定义注解的场景及实现\n* HTTP请求的GET与POST方式的区别\n* Session与Cookie区别\n* 列出自己常用的JDK包\n* MVC设计思想\n* equals与==的区别\n* hashCode和equals方法的区别与联系\n* 什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable 接口的作用\n* Object类中常见的方法，为什么wait  notify会放在Object里边？\n* Java的平台无关性如何体现出来的\n* JDK和JRE的区别\n* Java 8有哪些新特性\n#### 1.2、Java常见集合\n* List 和 Set 区别\n* Set和hashCode以及equals方法的联系\n* List 和 Map 区别\n* Arraylist 与 LinkedList 区别\n* ArrayList 与 Vector 区别\n* HashMap 和 Hashtable 的区别\n* HashSet 和 HashMap 区别\n* HashMap 和 ConcurrentHashMap 的区别\n* HashMap 的工作原理及代码实现，什么时候用到红黑树\n* 多线程情况下HashMap死循环的问题\n* HashMap出现Hash DOS攻击的问题\n* ConcurrentHashMap 的工作原理及代码实现，如何统计所有的元素个数\n* 手写简单的HashMap\n* 看过那些Java集合类的源码\n#### 1.3、进程和线程\n* 线程和进程的概念、并行和并发的概念\n* 创建线程的方式及实现\n* 进程间通信的方式\n* 说说 CountDownLatch、CyclicBarrier 原理和区别\n* 说说 Semaphore 原理\n* 说说 Exchanger 原理\n* ThreadLocal 原理分析，ThreadLocal为什么会出现OOM，出现的深层次原理\n* 讲讲线程池的实现原理\n* 线程池的几种实现方式\n* 线程的生命周期，状态是如何转移的\n  可参考：《Java多线程编程核心技术》\n#### 1.4、锁机制\n* 说说线程安全问题，什么是线程安全，如何保证线程安全\n* 重入锁的概念，重入锁为什么可以防止死锁\n* 产生死锁的四个条件（互斥、请求与保持、不剥夺、循环等待）\n* 如何检查死锁（通过jConsole检查死锁）\n* volatile 实现原理（禁止指令重排、刷新内存）\n* synchronized 实现原理（对象监视器）\n* synchronized 与 lock 的区别\n* AQS同步队列\n* CAS无锁的概念、乐观锁和悲观锁\n* 常见的原子操作类\n* 什么是ABA问题，出现ABA问题JDK是如何解决的\n* 乐观锁的业务场景及实现方式\n* Java 8并法包下常见的并发类\n* 偏向锁、轻量级锁、重量级锁、自旋锁的概念\n  可参考：《Java多线程编程核心技术》\n#### 1.5、JVM\n* JVM运行时内存区域划分\n* 内存溢出OOM和堆栈溢出SOE的示例及原因、如何排查与解决\n* 如何判断对象是否可以回收或存活\n* 常见的GC回收算法及其含义\n* 常见的JVM性能监控和故障处理工具类：jps、jstat、jmap、jinfo、jconsole等\n* JVM如何设置参数\n* JVM性能调优\n* 类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的\n* 类加载的过程：加载、验证、准备、解析、初始化\n* 强引用、软引用、弱引用、虚引用\n* Java内存模型JMM\n#### 1.6、设计模式\n* 常见的设计模式\n* 设计模式的的六大原则及其含义\n* 常见的单例模式以及各种实现方式的优缺点，哪一种最好，手写常见的单利模式\n* 设计模式在实际场景中的应用\n* Spring中用到了哪些设计模式\n* MyBatis中用到了哪些设计模式\n* 你项目中有使用哪些设计模式\n* 说说常用开源框架中设计模式使用分析\n   动态代理很重要！！！\n#### 1.7、数据结构\n* 树（二叉查找树、平衡二叉树、红黑树、B树、B+树）\n* 深度有限算法、广度优先算法\n* 克鲁斯卡尔算法、普林母算法、迪克拉斯算法\n* 什么是一致性Hash及其原理、Hash环问题\n* 常见的排序算法和查找算法：快排、折半查找、堆排序等\n#### 1.8、网络/IO基础\n* BIO、NIO、AIO的概念\n* 什么是长连接和短连接\n* Http1.0和2.0相比有什么区别，可参考《Http 2.0》\n* Https的基本概念\n* 三次握手和四次挥手、为什么挥手需要四次\n* 从游览器中输入URL到页面加载的发生了什么？可参考《从输入URL到页面加载发生了什么》\n### 二、数据存储和消息队列\n#### 2.1、数据库\n* MySQL 索引使用的注意事项\n* DDL、DML、DCL分别指什么\n* explain命令\n* left join，right join，inner join\n* 数据库事物ACID（原子性、一致性、隔离性、持久性）\n* 事物的隔离级别（读未提交、读以提交、可重复读、可序列化读）\n* 脏读、幻读、不可重复读\n* 数据库的几大范式\n* 数据库常见的命令\n* 说说分库与分表设计\n* 分库与分表带来的分布式困境与应对之策（如何解决分布式下的分库分表，全局表？）\n* 说说 SQL 优化之道\n* MySQL遇到的死锁问题、如何排查与解决\n* 存储引擎的 InnoDB与MyISAM区别，优缺点，使用场景\n* 索引类别（B+树索引、全文索引、哈希索引）、索引的原理\n* 什么是自适应哈希索引（AHI）\n* 为什么要用 B+tree作为MySQL索引的数据结构\n* 聚集索引与非聚集索引的区别\n* 遇到过索引失效的情况没，什么时候可能会出现，如何解决\n* limit 20000 加载很慢怎么解决\n* 如何选择合适的分布式主键方案\n* 选择合适的数据存储方案\n* 常见的几种分布式ID的设计方案\n* 常见的数据库优化方案，在你的项目中数据库如何进行优化的\n#### 2.2、Redis\n* Redis 有哪些数据类型，可参考《Redis常见的5种不同的数据类型详解》\n* Redis 内部结构\n* Redis 使用场景\n* Redis 持久化机制，可参考《使用快照和AOF将Redis数据持久化到硬盘中》\n* Redis 集群方案与实现\n* Redis 为什么是单线程的？\n* 缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级\n* 使用缓存的合理性问题\n* Redis常见的回收策略\n#### 2.3、消息队列\n* 消息队列的使用场景\n* 消息的重发补偿解决思路\n* 消息的幂等性解决思路\n* 消息的堆积解决思路\n* 自己如何实现消息队列\n* 如何保证消息的有序性\n### 三、开源框架和容器\n#### 3.1、SSM/Servlet\n* Servlet的生命周期\n* 转发与重定向的区别\n* BeanFactory 和 ApplicationContext 有什么区别\n* Spring Bean 的生命周期\n* Spring IOC 如何实现\n* Spring中Bean的作用域，默认的是哪一个\n* 说说 Spring AOP、Spring AOP 实现原理\n* 动态代理（CGLib 与 JDK）、优缺点、性能对比、如何选择\n* Spring 事务实现方式、事务的传播机制、默认的事务类别\n* Spring 事务底层原理\n* Spring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑，可参考《JDK动态代理给Spring事务埋下的坑！》\n* 如何自定义注解实现功能\n* Spring MVC 运行流程\n* Spring MVC 启动流程\n* Spring 的单例实现原理\n* Spring 框架中用到了哪些设计模式\n* Spring 其他产品（Srping Boot、Spring Cloud、Spring Secuirity、Spring Data、Spring AMQP 等）\n* 有没有用到Spring Boot，Spring Boot的认识、原理\n* MyBatis的原理\n    可参考《为什么会有Spring》\n    可参考《为什么会有Spring AOP》\n#### 3.2、Netty\n* 为什么选择 Netty\n* 说说业务中，Netty 的使用场景\n* 原生的 NIO 在 JDK 1.7 版本存在 epoll bug\n* 什么是TCP 粘包/拆包\n* TCP粘包/拆包的解决办法\n* Netty 线程模型\n* 说说 Netty 的零拷贝\n* Netty 内部执行流程\n* Netty 重连实现\n#### 3.3、Tomcat\n* Tomcat的基础架构（Server、Service、Connector、Container）\n* Tomcat如何加载Servlet的\n* Pipeline-Valve机制\n    可参考：《四张图带你了解Tomcat系统架构！》\n### 四、分布式\n#### 4.1、Nginx\n* 请解释什么是C10K问题或者知道什么是C10K问题吗？\n* Nginx简介，可参考《Nginx简介》\n* 正向代理和反向代理.\n* Nginx几种常见的负载均衡策略\n* Nginx服务器上的Master和Worker进程分别是什么\n* 使用“反向代理服务器”的优点是什么?\n#### 4.2、分布式其他\n* 谈谈业务中使用分布式的场景\n* Session 分布式方案\n* Session 分布式处理\n* 分布式锁的应用场景、分布式锁的产生原因、基本概念\n* 分布是锁的常见解决方案\n* 分布式事务的常见解决方案\n* 集群与负载均衡的算法与实现\n* 说说分库与分表设计，可参考《数据库分库分表策略的具体实现方案》\n* 分库与分表带来的分布式困境与应对之策\n#### 4.3、Dubbo\n* 什么是Dubbo，可参考《Dubbo入门》\n* 什么是RPC、如何实现RPC、RPC 的实现原理，可参考《基于HTTP的RPC实现》\n* Dubbo中的SPI是什么概念\n* Dubbo的基本原理、执行流程\n### 五、微服务\n#### 5.1、微服务\n* 前后端分离是如何做的？\n* 微服务哪些框架\n* Spring Could的常见组件有哪些？可参考《Spring Cloud概述》\n* 领域驱动有了解吗？什么是领域驱动模型？充血模型、贫血模型\n* JWT有了解吗，什么是JWT，可参考《前后端分离利器之JWT》\n* 你怎么理解 RESTful\n* 说说如何设计一个良好的 API\n* 如何理解 RESTful API 的幂等性\n* 如何保证接口的幂等性\n* 说说 CAP 定理、BASE 理论\n* 怎么考虑数据一致性问题\n* 说说最终一致性的实现方案\n* 微服务的优缺点，可参考《微服务批判》\n* 微服务与 SOA 的区别\n* 如何拆分服务、水平分割、垂直分割\n* 如何应对微服务的链式调用异常\n* 如何快速追踪与定位问题\n* 如何保证微服务的安全、认证\n#### 5.2、安全问题\n* 如何防范常见的Web攻击、如何方式SQL注入\n* 服务端通信安全攻防\n* HTTPS原理剖析、降级攻击、HTTP与HTTPS的对比\n#### 5.3、性能优化\n* 性能指标有哪些\n* 如何发现性能瓶颈\n* 性能调优的常见手段\n* 说说你在项目中如何进行性能调优\n### 六、其他\n#### 6.1、设计能力\n* 说说你在项目中使用过的UML图\n* 你如何考虑组件化、服务化、系统拆分\n* 秒杀场景如何设计\n  可参考：《秒杀系统的技术挑战、应对策略以及架构设计总结一二！》\n#### 6.2、业务工程\n* 说说你的开发流程、如何进行自动化部署的\n* 你和团队是如何沟通的\n* 你如何进行代码评审\n* 说说你对技术与业务的理解\n* 说说你在项目中遇到感觉最难Bug，是如何解决的\n* 介绍一下工作中的一个你认为最有价值的项目，以及在这个过程中的角色、解决的问题、你觉得你们项目还有哪些不足的地方\n#### 6.3、软实力\n* 说说你的优缺点、亮点\n* 说说你最近在看什么书、什么博客、在研究什么新技术、再看那些开源项目的源代码\n* 说说你觉得最有意义的技术书籍\n* 工作之余做什么事情、平时是如何学习的，怎样提升自己的能力\n* 说说个人发展方向方面的思考\n* 说说你认为的服务端开发工程师应该具备哪些能力\n* 说说你认为的架构师是什么样的，架构师主要做什么\n* 如何看待加班的问题\n \n 当然，一个完整的面试肯定不止上述的知识点，其他的诸如：Linux、数据结构、算法、逻辑思维题、系统设计题、职业规划等等都会有所涉及\n\n \n**二、进阶篇**\n  \n**三、高级篇**\n   \n**四、架构篇**\n\n","source":"_drafts/index.md","raw":"title: Java工程师成神之路\ntags: []\ncategories: [学习笔记]\ndate: 2018-03-30 11:14:00\n---\nJava工程师成神之路\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### **一、基础篇**\n#### 1.1、Java基础 \n* 面向对象的特征：继承、封装和多态\n* final, finally, finalize 的区别\n* Exception、Error、运行时异常与一般异常有何异同\n* 请写出5种常见到的runtime exception\n* int 和 Integer 有什么区别，Integer的值缓存范围\n* 包装类，装箱和拆箱\n* String、StringBuilder、StringBuffer\n* 重载和重写的区别\n* 抽象类和接口有什么区别\n* 说说反射的用途及实现\n* 说说自定义注解的场景及实现\n* HTTP请求的GET与POST方式的区别\n* Session与Cookie区别\n* 列出自己常用的JDK包\n* MVC设计思想\n* equals与==的区别\n* hashCode和equals方法的区别与联系\n* 什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable 接口的作用\n* Object类中常见的方法，为什么wait  notify会放在Object里边？\n* Java的平台无关性如何体现出来的\n* JDK和JRE的区别\n* Java 8有哪些新特性\n#### 1.2、Java常见集合\n* List 和 Set 区别\n* Set和hashCode以及equals方法的联系\n* List 和 Map 区别\n* Arraylist 与 LinkedList 区别\n* ArrayList 与 Vector 区别\n* HashMap 和 Hashtable 的区别\n* HashSet 和 HashMap 区别\n* HashMap 和 ConcurrentHashMap 的区别\n* HashMap 的工作原理及代码实现，什么时候用到红黑树\n* 多线程情况下HashMap死循环的问题\n* HashMap出现Hash DOS攻击的问题\n* ConcurrentHashMap 的工作原理及代码实现，如何统计所有的元素个数\n* 手写简单的HashMap\n* 看过那些Java集合类的源码\n#### 1.3、进程和线程\n* 线程和进程的概念、并行和并发的概念\n* 创建线程的方式及实现\n* 进程间通信的方式\n* 说说 CountDownLatch、CyclicBarrier 原理和区别\n* 说说 Semaphore 原理\n* 说说 Exchanger 原理\n* ThreadLocal 原理分析，ThreadLocal为什么会出现OOM，出现的深层次原理\n* 讲讲线程池的实现原理\n* 线程池的几种实现方式\n* 线程的生命周期，状态是如何转移的\n  可参考：《Java多线程编程核心技术》\n#### 1.4、锁机制\n* 说说线程安全问题，什么是线程安全，如何保证线程安全\n* 重入锁的概念，重入锁为什么可以防止死锁\n* 产生死锁的四个条件（互斥、请求与保持、不剥夺、循环等待）\n* 如何检查死锁（通过jConsole检查死锁）\n* volatile 实现原理（禁止指令重排、刷新内存）\n* synchronized 实现原理（对象监视器）\n* synchronized 与 lock 的区别\n* AQS同步队列\n* CAS无锁的概念、乐观锁和悲观锁\n* 常见的原子操作类\n* 什么是ABA问题，出现ABA问题JDK是如何解决的\n* 乐观锁的业务场景及实现方式\n* Java 8并法包下常见的并发类\n* 偏向锁、轻量级锁、重量级锁、自旋锁的概念\n  可参考：《Java多线程编程核心技术》\n#### 1.5、JVM\n* JVM运行时内存区域划分\n* 内存溢出OOM和堆栈溢出SOE的示例及原因、如何排查与解决\n* 如何判断对象是否可以回收或存活\n* 常见的GC回收算法及其含义\n* 常见的JVM性能监控和故障处理工具类：jps、jstat、jmap、jinfo、jconsole等\n* JVM如何设置参数\n* JVM性能调优\n* 类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的\n* 类加载的过程：加载、验证、准备、解析、初始化\n* 强引用、软引用、弱引用、虚引用\n* Java内存模型JMM\n#### 1.6、设计模式\n* 常见的设计模式\n* 设计模式的的六大原则及其含义\n* 常见的单例模式以及各种实现方式的优缺点，哪一种最好，手写常见的单利模式\n* 设计模式在实际场景中的应用\n* Spring中用到了哪些设计模式\n* MyBatis中用到了哪些设计模式\n* 你项目中有使用哪些设计模式\n* 说说常用开源框架中设计模式使用分析\n   动态代理很重要！！！\n#### 1.7、数据结构\n* 树（二叉查找树、平衡二叉树、红黑树、B树、B+树）\n* 深度有限算法、广度优先算法\n* 克鲁斯卡尔算法、普林母算法、迪克拉斯算法\n* 什么是一致性Hash及其原理、Hash环问题\n* 常见的排序算法和查找算法：快排、折半查找、堆排序等\n#### 1.8、网络/IO基础\n* BIO、NIO、AIO的概念\n* 什么是长连接和短连接\n* Http1.0和2.0相比有什么区别，可参考《Http 2.0》\n* Https的基本概念\n* 三次握手和四次挥手、为什么挥手需要四次\n* 从游览器中输入URL到页面加载的发生了什么？可参考《从输入URL到页面加载发生了什么》\n### 二、数据存储和消息队列\n#### 2.1、数据库\n* MySQL 索引使用的注意事项\n* DDL、DML、DCL分别指什么\n* explain命令\n* left join，right join，inner join\n* 数据库事物ACID（原子性、一致性、隔离性、持久性）\n* 事物的隔离级别（读未提交、读以提交、可重复读、可序列化读）\n* 脏读、幻读、不可重复读\n* 数据库的几大范式\n* 数据库常见的命令\n* 说说分库与分表设计\n* 分库与分表带来的分布式困境与应对之策（如何解决分布式下的分库分表，全局表？）\n* 说说 SQL 优化之道\n* MySQL遇到的死锁问题、如何排查与解决\n* 存储引擎的 InnoDB与MyISAM区别，优缺点，使用场景\n* 索引类别（B+树索引、全文索引、哈希索引）、索引的原理\n* 什么是自适应哈希索引（AHI）\n* 为什么要用 B+tree作为MySQL索引的数据结构\n* 聚集索引与非聚集索引的区别\n* 遇到过索引失效的情况没，什么时候可能会出现，如何解决\n* limit 20000 加载很慢怎么解决\n* 如何选择合适的分布式主键方案\n* 选择合适的数据存储方案\n* 常见的几种分布式ID的设计方案\n* 常见的数据库优化方案，在你的项目中数据库如何进行优化的\n#### 2.2、Redis\n* Redis 有哪些数据类型，可参考《Redis常见的5种不同的数据类型详解》\n* Redis 内部结构\n* Redis 使用场景\n* Redis 持久化机制，可参考《使用快照和AOF将Redis数据持久化到硬盘中》\n* Redis 集群方案与实现\n* Redis 为什么是单线程的？\n* 缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级\n* 使用缓存的合理性问题\n* Redis常见的回收策略\n#### 2.3、消息队列\n* 消息队列的使用场景\n* 消息的重发补偿解决思路\n* 消息的幂等性解决思路\n* 消息的堆积解决思路\n* 自己如何实现消息队列\n* 如何保证消息的有序性\n### 三、开源框架和容器\n#### 3.1、SSM/Servlet\n* Servlet的生命周期\n* 转发与重定向的区别\n* BeanFactory 和 ApplicationContext 有什么区别\n* Spring Bean 的生命周期\n* Spring IOC 如何实现\n* Spring中Bean的作用域，默认的是哪一个\n* 说说 Spring AOP、Spring AOP 实现原理\n* 动态代理（CGLib 与 JDK）、优缺点、性能对比、如何选择\n* Spring 事务实现方式、事务的传播机制、默认的事务类别\n* Spring 事务底层原理\n* Spring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑，可参考《JDK动态代理给Spring事务埋下的坑！》\n* 如何自定义注解实现功能\n* Spring MVC 运行流程\n* Spring MVC 启动流程\n* Spring 的单例实现原理\n* Spring 框架中用到了哪些设计模式\n* Spring 其他产品（Srping Boot、Spring Cloud、Spring Secuirity、Spring Data、Spring AMQP 等）\n* 有没有用到Spring Boot，Spring Boot的认识、原理\n* MyBatis的原理\n    可参考《为什么会有Spring》\n    可参考《为什么会有Spring AOP》\n#### 3.2、Netty\n* 为什么选择 Netty\n* 说说业务中，Netty 的使用场景\n* 原生的 NIO 在 JDK 1.7 版本存在 epoll bug\n* 什么是TCP 粘包/拆包\n* TCP粘包/拆包的解决办法\n* Netty 线程模型\n* 说说 Netty 的零拷贝\n* Netty 内部执行流程\n* Netty 重连实现\n#### 3.3、Tomcat\n* Tomcat的基础架构（Server、Service、Connector、Container）\n* Tomcat如何加载Servlet的\n* Pipeline-Valve机制\n    可参考：《四张图带你了解Tomcat系统架构！》\n### 四、分布式\n#### 4.1、Nginx\n* 请解释什么是C10K问题或者知道什么是C10K问题吗？\n* Nginx简介，可参考《Nginx简介》\n* 正向代理和反向代理.\n* Nginx几种常见的负载均衡策略\n* Nginx服务器上的Master和Worker进程分别是什么\n* 使用“反向代理服务器”的优点是什么?\n#### 4.2、分布式其他\n* 谈谈业务中使用分布式的场景\n* Session 分布式方案\n* Session 分布式处理\n* 分布式锁的应用场景、分布式锁的产生原因、基本概念\n* 分布是锁的常见解决方案\n* 分布式事务的常见解决方案\n* 集群与负载均衡的算法与实现\n* 说说分库与分表设计，可参考《数据库分库分表策略的具体实现方案》\n* 分库与分表带来的分布式困境与应对之策\n#### 4.3、Dubbo\n* 什么是Dubbo，可参考《Dubbo入门》\n* 什么是RPC、如何实现RPC、RPC 的实现原理，可参考《基于HTTP的RPC实现》\n* Dubbo中的SPI是什么概念\n* Dubbo的基本原理、执行流程\n### 五、微服务\n#### 5.1、微服务\n* 前后端分离是如何做的？\n* 微服务哪些框架\n* Spring Could的常见组件有哪些？可参考《Spring Cloud概述》\n* 领域驱动有了解吗？什么是领域驱动模型？充血模型、贫血模型\n* JWT有了解吗，什么是JWT，可参考《前后端分离利器之JWT》\n* 你怎么理解 RESTful\n* 说说如何设计一个良好的 API\n* 如何理解 RESTful API 的幂等性\n* 如何保证接口的幂等性\n* 说说 CAP 定理、BASE 理论\n* 怎么考虑数据一致性问题\n* 说说最终一致性的实现方案\n* 微服务的优缺点，可参考《微服务批判》\n* 微服务与 SOA 的区别\n* 如何拆分服务、水平分割、垂直分割\n* 如何应对微服务的链式调用异常\n* 如何快速追踪与定位问题\n* 如何保证微服务的安全、认证\n#### 5.2、安全问题\n* 如何防范常见的Web攻击、如何方式SQL注入\n* 服务端通信安全攻防\n* HTTPS原理剖析、降级攻击、HTTP与HTTPS的对比\n#### 5.3、性能优化\n* 性能指标有哪些\n* 如何发现性能瓶颈\n* 性能调优的常见手段\n* 说说你在项目中如何进行性能调优\n### 六、其他\n#### 6.1、设计能力\n* 说说你在项目中使用过的UML图\n* 你如何考虑组件化、服务化、系统拆分\n* 秒杀场景如何设计\n  可参考：《秒杀系统的技术挑战、应对策略以及架构设计总结一二！》\n#### 6.2、业务工程\n* 说说你的开发流程、如何进行自动化部署的\n* 你和团队是如何沟通的\n* 你如何进行代码评审\n* 说说你对技术与业务的理解\n* 说说你在项目中遇到感觉最难Bug，是如何解决的\n* 介绍一下工作中的一个你认为最有价值的项目，以及在这个过程中的角色、解决的问题、你觉得你们项目还有哪些不足的地方\n#### 6.3、软实力\n* 说说你的优缺点、亮点\n* 说说你最近在看什么书、什么博客、在研究什么新技术、再看那些开源项目的源代码\n* 说说你觉得最有意义的技术书籍\n* 工作之余做什么事情、平时是如何学习的，怎样提升自己的能力\n* 说说个人发展方向方面的思考\n* 说说你认为的服务端开发工程师应该具备哪些能力\n* 说说你认为的架构师是什么样的，架构师主要做什么\n* 如何看待加班的问题\n \n 当然，一个完整的面试肯定不止上述的知识点，其他的诸如：Linux、数据结构、算法、逻辑思维题、系统设计题、职业规划等等都会有所涉及\n\n \n**二、进阶篇**\n  \n**三、高级篇**\n   \n**四、架构篇**\n\n","slug":"index","published":0,"updated":"2018-09-06T11:25:49.181Z","_id":"cjlqgwfsz0000estjzfretci2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Java工程师成神之路<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"一、基础篇\"><a href=\"#一、基础篇\" class=\"headerlink\" title=\"一、基础篇\"></a><strong>一、基础篇</strong></h3><h4 id=\"1-1、Java基础\"><a href=\"#1-1、Java基础\" class=\"headerlink\" title=\"1.1、Java基础\"></a>1.1、Java基础</h4><ul>\n<li>面向对象的特征：继承、封装和多态</li>\n<li>final, finally, finalize 的区别</li>\n<li>Exception、Error、运行时异常与一般异常有何异同</li>\n<li>请写出5种常见到的runtime exception</li>\n<li>int 和 Integer 有什么区别，Integer的值缓存范围</li>\n<li>包装类，装箱和拆箱</li>\n<li>String、StringBuilder、StringBuffer</li>\n<li>重载和重写的区别</li>\n<li>抽象类和接口有什么区别</li>\n<li>说说反射的用途及实现</li>\n<li>说说自定义注解的场景及实现</li>\n<li>HTTP请求的GET与POST方式的区别</li>\n<li>Session与Cookie区别</li>\n<li>列出自己常用的JDK包</li>\n<li>MVC设计思想</li>\n<li>equals与==的区别</li>\n<li>hashCode和equals方法的区别与联系</li>\n<li>什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable 接口的作用</li>\n<li>Object类中常见的方法，为什么wait  notify会放在Object里边？</li>\n<li>Java的平台无关性如何体现出来的</li>\n<li>JDK和JRE的区别</li>\n<li>Java 8有哪些新特性<h4 id=\"1-2、Java常见集合\"><a href=\"#1-2、Java常见集合\" class=\"headerlink\" title=\"1.2、Java常见集合\"></a>1.2、Java常见集合</h4></li>\n<li>List 和 Set 区别</li>\n<li>Set和hashCode以及equals方法的联系</li>\n<li>List 和 Map 区别</li>\n<li>Arraylist 与 LinkedList 区别</li>\n<li>ArrayList 与 Vector 区别</li>\n<li>HashMap 和 Hashtable 的区别</li>\n<li>HashSet 和 HashMap 区别</li>\n<li>HashMap 和 ConcurrentHashMap 的区别</li>\n<li>HashMap 的工作原理及代码实现，什么时候用到红黑树</li>\n<li>多线程情况下HashMap死循环的问题</li>\n<li>HashMap出现Hash DOS攻击的问题</li>\n<li>ConcurrentHashMap 的工作原理及代码实现，如何统计所有的元素个数</li>\n<li>手写简单的HashMap</li>\n<li>看过那些Java集合类的源码<h4 id=\"1-3、进程和线程\"><a href=\"#1-3、进程和线程\" class=\"headerlink\" title=\"1.3、进程和线程\"></a>1.3、进程和线程</h4></li>\n<li>线程和进程的概念、并行和并发的概念</li>\n<li>创建线程的方式及实现</li>\n<li>进程间通信的方式</li>\n<li>说说 CountDownLatch、CyclicBarrier 原理和区别</li>\n<li>说说 Semaphore 原理</li>\n<li>说说 Exchanger 原理</li>\n<li>ThreadLocal 原理分析，ThreadLocal为什么会出现OOM，出现的深层次原理</li>\n<li>讲讲线程池的实现原理</li>\n<li>线程池的几种实现方式</li>\n<li>线程的生命周期，状态是如何转移的<br>可参考：《Java多线程编程核心技术》<h4 id=\"1-4、锁机制\"><a href=\"#1-4、锁机制\" class=\"headerlink\" title=\"1.4、锁机制\"></a>1.4、锁机制</h4></li>\n<li>说说线程安全问题，什么是线程安全，如何保证线程安全</li>\n<li>重入锁的概念，重入锁为什么可以防止死锁</li>\n<li>产生死锁的四个条件（互斥、请求与保持、不剥夺、循环等待）</li>\n<li>如何检查死锁（通过jConsole检查死锁）</li>\n<li>volatile 实现原理（禁止指令重排、刷新内存）</li>\n<li>synchronized 实现原理（对象监视器）</li>\n<li>synchronized 与 lock 的区别</li>\n<li>AQS同步队列</li>\n<li>CAS无锁的概念、乐观锁和悲观锁</li>\n<li>常见的原子操作类</li>\n<li>什么是ABA问题，出现ABA问题JDK是如何解决的</li>\n<li>乐观锁的业务场景及实现方式</li>\n<li>Java 8并法包下常见的并发类</li>\n<li>偏向锁、轻量级锁、重量级锁、自旋锁的概念<br>可参考：《Java多线程编程核心技术》<h4 id=\"1-5、JVM\"><a href=\"#1-5、JVM\" class=\"headerlink\" title=\"1.5、JVM\"></a>1.5、JVM</h4></li>\n<li>JVM运行时内存区域划分</li>\n<li>内存溢出OOM和堆栈溢出SOE的示例及原因、如何排查与解决</li>\n<li>如何判断对象是否可以回收或存活</li>\n<li>常见的GC回收算法及其含义</li>\n<li>常见的JVM性能监控和故障处理工具类：jps、jstat、jmap、jinfo、jconsole等</li>\n<li>JVM如何设置参数</li>\n<li>JVM性能调优</li>\n<li>类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的</li>\n<li>类加载的过程：加载、验证、准备、解析、初始化</li>\n<li>强引用、软引用、弱引用、虚引用</li>\n<li>Java内存模型JMM<h4 id=\"1-6、设计模式\"><a href=\"#1-6、设计模式\" class=\"headerlink\" title=\"1.6、设计模式\"></a>1.6、设计模式</h4></li>\n<li>常见的设计模式</li>\n<li>设计模式的的六大原则及其含义</li>\n<li>常见的单例模式以及各种实现方式的优缺点，哪一种最好，手写常见的单利模式</li>\n<li>设计模式在实际场景中的应用</li>\n<li>Spring中用到了哪些设计模式</li>\n<li>MyBatis中用到了哪些设计模式</li>\n<li>你项目中有使用哪些设计模式</li>\n<li>说说常用开源框架中设计模式使用分析<br> 动态代理很重要！！！<h4 id=\"1-7、数据结构\"><a href=\"#1-7、数据结构\" class=\"headerlink\" title=\"1.7、数据结构\"></a>1.7、数据结构</h4></li>\n<li>树（二叉查找树、平衡二叉树、红黑树、B树、B+树）</li>\n<li>深度有限算法、广度优先算法</li>\n<li>克鲁斯卡尔算法、普林母算法、迪克拉斯算法</li>\n<li>什么是一致性Hash及其原理、Hash环问题</li>\n<li>常见的排序算法和查找算法：快排、折半查找、堆排序等<h4 id=\"1-8、网络-IO基础\"><a href=\"#1-8、网络-IO基础\" class=\"headerlink\" title=\"1.8、网络/IO基础\"></a>1.8、网络/IO基础</h4></li>\n<li>BIO、NIO、AIO的概念</li>\n<li>什么是长连接和短连接</li>\n<li>Http1.0和2.0相比有什么区别，可参考《Http 2.0》</li>\n<li>Https的基本概念</li>\n<li>三次握手和四次挥手、为什么挥手需要四次</li>\n<li>从游览器中输入URL到页面加载的发生了什么？可参考《从输入URL到页面加载发生了什么》<h3 id=\"二、数据存储和消息队列\"><a href=\"#二、数据存储和消息队列\" class=\"headerlink\" title=\"二、数据存储和消息队列\"></a>二、数据存储和消息队列</h3><h4 id=\"2-1、数据库\"><a href=\"#2-1、数据库\" class=\"headerlink\" title=\"2.1、数据库\"></a>2.1、数据库</h4></li>\n<li>MySQL 索引使用的注意事项</li>\n<li>DDL、DML、DCL分别指什么</li>\n<li>explain命令</li>\n<li>left join，right join，inner join</li>\n<li>数据库事物ACID（原子性、一致性、隔离性、持久性）</li>\n<li>事物的隔离级别（读未提交、读以提交、可重复读、可序列化读）</li>\n<li>脏读、幻读、不可重复读</li>\n<li>数据库的几大范式</li>\n<li>数据库常见的命令</li>\n<li>说说分库与分表设计</li>\n<li>分库与分表带来的分布式困境与应对之策（如何解决分布式下的分库分表，全局表？）</li>\n<li>说说 SQL 优化之道</li>\n<li>MySQL遇到的死锁问题、如何排查与解决</li>\n<li>存储引擎的 InnoDB与MyISAM区别，优缺点，使用场景</li>\n<li>索引类别（B+树索引、全文索引、哈希索引）、索引的原理</li>\n<li>什么是自适应哈希索引（AHI）</li>\n<li>为什么要用 B+tree作为MySQL索引的数据结构</li>\n<li>聚集索引与非聚集索引的区别</li>\n<li>遇到过索引失效的情况没，什么时候可能会出现，如何解决</li>\n<li>limit 20000 加载很慢怎么解决</li>\n<li>如何选择合适的分布式主键方案</li>\n<li>选择合适的数据存储方案</li>\n<li>常见的几种分布式ID的设计方案</li>\n<li>常见的数据库优化方案，在你的项目中数据库如何进行优化的<h4 id=\"2-2、Redis\"><a href=\"#2-2、Redis\" class=\"headerlink\" title=\"2.2、Redis\"></a>2.2、Redis</h4></li>\n<li>Redis 有哪些数据类型，可参考《Redis常见的5种不同的数据类型详解》</li>\n<li>Redis 内部结构</li>\n<li>Redis 使用场景</li>\n<li>Redis 持久化机制，可参考《使用快照和AOF将Redis数据持久化到硬盘中》</li>\n<li>Redis 集群方案与实现</li>\n<li>Redis 为什么是单线程的？</li>\n<li>缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级</li>\n<li>使用缓存的合理性问题</li>\n<li>Redis常见的回收策略<h4 id=\"2-3、消息队列\"><a href=\"#2-3、消息队列\" class=\"headerlink\" title=\"2.3、消息队列\"></a>2.3、消息队列</h4></li>\n<li>消息队列的使用场景</li>\n<li>消息的重发补偿解决思路</li>\n<li>消息的幂等性解决思路</li>\n<li>消息的堆积解决思路</li>\n<li>自己如何实现消息队列</li>\n<li>如何保证消息的有序性<h3 id=\"三、开源框架和容器\"><a href=\"#三、开源框架和容器\" class=\"headerlink\" title=\"三、开源框架和容器\"></a>三、开源框架和容器</h3><h4 id=\"3-1、SSM-Servlet\"><a href=\"#3-1、SSM-Servlet\" class=\"headerlink\" title=\"3.1、SSM/Servlet\"></a>3.1、SSM/Servlet</h4></li>\n<li>Servlet的生命周期</li>\n<li>转发与重定向的区别</li>\n<li>BeanFactory 和 ApplicationContext 有什么区别</li>\n<li>Spring Bean 的生命周期</li>\n<li>Spring IOC 如何实现</li>\n<li>Spring中Bean的作用域，默认的是哪一个</li>\n<li>说说 Spring AOP、Spring AOP 实现原理</li>\n<li>动态代理（CGLib 与 JDK）、优缺点、性能对比、如何选择</li>\n<li>Spring 事务实现方式、事务的传播机制、默认的事务类别</li>\n<li>Spring 事务底层原理</li>\n<li>Spring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑，可参考《JDK动态代理给Spring事务埋下的坑！》</li>\n<li>如何自定义注解实现功能</li>\n<li>Spring MVC 运行流程</li>\n<li>Spring MVC 启动流程</li>\n<li>Spring 的单例实现原理</li>\n<li>Spring 框架中用到了哪些设计模式</li>\n<li>Spring 其他产品（Srping Boot、Spring Cloud、Spring Secuirity、Spring Data、Spring AMQP 等）</li>\n<li>有没有用到Spring Boot，Spring Boot的认识、原理</li>\n<li>MyBatis的原理<br>  可参考《为什么会有Spring》<br>  可参考《为什么会有Spring AOP》<h4 id=\"3-2、Netty\"><a href=\"#3-2、Netty\" class=\"headerlink\" title=\"3.2、Netty\"></a>3.2、Netty</h4></li>\n<li>为什么选择 Netty</li>\n<li>说说业务中，Netty 的使用场景</li>\n<li>原生的 NIO 在 JDK 1.7 版本存在 epoll bug</li>\n<li>什么是TCP 粘包/拆包</li>\n<li>TCP粘包/拆包的解决办法</li>\n<li>Netty 线程模型</li>\n<li>说说 Netty 的零拷贝</li>\n<li>Netty 内部执行流程</li>\n<li>Netty 重连实现<h4 id=\"3-3、Tomcat\"><a href=\"#3-3、Tomcat\" class=\"headerlink\" title=\"3.3、Tomcat\"></a>3.3、Tomcat</h4></li>\n<li>Tomcat的基础架构（Server、Service、Connector、Container）</li>\n<li>Tomcat如何加载Servlet的</li>\n<li>Pipeline-Valve机制<br>  可参考：《四张图带你了解Tomcat系统架构！》<h3 id=\"四、分布式\"><a href=\"#四、分布式\" class=\"headerlink\" title=\"四、分布式\"></a>四、分布式</h3><h4 id=\"4-1、Nginx\"><a href=\"#4-1、Nginx\" class=\"headerlink\" title=\"4.1、Nginx\"></a>4.1、Nginx</h4></li>\n<li>请解释什么是C10K问题或者知道什么是C10K问题吗？</li>\n<li>Nginx简介，可参考《Nginx简介》</li>\n<li>正向代理和反向代理.</li>\n<li>Nginx几种常见的负载均衡策略</li>\n<li>Nginx服务器上的Master和Worker进程分别是什么</li>\n<li>使用“反向代理服务器”的优点是什么?<h4 id=\"4-2、分布式其他\"><a href=\"#4-2、分布式其他\" class=\"headerlink\" title=\"4.2、分布式其他\"></a>4.2、分布式其他</h4></li>\n<li>谈谈业务中使用分布式的场景</li>\n<li>Session 分布式方案</li>\n<li>Session 分布式处理</li>\n<li>分布式锁的应用场景、分布式锁的产生原因、基本概念</li>\n<li>分布是锁的常见解决方案</li>\n<li>分布式事务的常见解决方案</li>\n<li>集群与负载均衡的算法与实现</li>\n<li>说说分库与分表设计，可参考《数据库分库分表策略的具体实现方案》</li>\n<li>分库与分表带来的分布式困境与应对之策<h4 id=\"4-3、Dubbo\"><a href=\"#4-3、Dubbo\" class=\"headerlink\" title=\"4.3、Dubbo\"></a>4.3、Dubbo</h4></li>\n<li>什么是Dubbo，可参考《Dubbo入门》</li>\n<li>什么是RPC、如何实现RPC、RPC 的实现原理，可参考《基于HTTP的RPC实现》</li>\n<li>Dubbo中的SPI是什么概念</li>\n<li>Dubbo的基本原理、执行流程<h3 id=\"五、微服务\"><a href=\"#五、微服务\" class=\"headerlink\" title=\"五、微服务\"></a>五、微服务</h3><h4 id=\"5-1、微服务\"><a href=\"#5-1、微服务\" class=\"headerlink\" title=\"5.1、微服务\"></a>5.1、微服务</h4></li>\n<li>前后端分离是如何做的？</li>\n<li>微服务哪些框架</li>\n<li>Spring Could的常见组件有哪些？可参考《Spring Cloud概述》</li>\n<li>领域驱动有了解吗？什么是领域驱动模型？充血模型、贫血模型</li>\n<li>JWT有了解吗，什么是JWT，可参考《前后端分离利器之JWT》</li>\n<li>你怎么理解 RESTful</li>\n<li>说说如何设计一个良好的 API</li>\n<li>如何理解 RESTful API 的幂等性</li>\n<li>如何保证接口的幂等性</li>\n<li>说说 CAP 定理、BASE 理论</li>\n<li>怎么考虑数据一致性问题</li>\n<li>说说最终一致性的实现方案</li>\n<li>微服务的优缺点，可参考《微服务批判》</li>\n<li>微服务与 SOA 的区别</li>\n<li>如何拆分服务、水平分割、垂直分割</li>\n<li>如何应对微服务的链式调用异常</li>\n<li>如何快速追踪与定位问题</li>\n<li>如何保证微服务的安全、认证<h4 id=\"5-2、安全问题\"><a href=\"#5-2、安全问题\" class=\"headerlink\" title=\"5.2、安全问题\"></a>5.2、安全问题</h4></li>\n<li>如何防范常见的Web攻击、如何方式SQL注入</li>\n<li>服务端通信安全攻防</li>\n<li>HTTPS原理剖析、降级攻击、HTTP与HTTPS的对比<h4 id=\"5-3、性能优化\"><a href=\"#5-3、性能优化\" class=\"headerlink\" title=\"5.3、性能优化\"></a>5.3、性能优化</h4></li>\n<li>性能指标有哪些</li>\n<li>如何发现性能瓶颈</li>\n<li>性能调优的常见手段</li>\n<li>说说你在项目中如何进行性能调优<h3 id=\"六、其他\"><a href=\"#六、其他\" class=\"headerlink\" title=\"六、其他\"></a>六、其他</h3><h4 id=\"6-1、设计能力\"><a href=\"#6-1、设计能力\" class=\"headerlink\" title=\"6.1、设计能力\"></a>6.1、设计能力</h4></li>\n<li>说说你在项目中使用过的UML图</li>\n<li>你如何考虑组件化、服务化、系统拆分</li>\n<li>秒杀场景如何设计<br>可参考：《秒杀系统的技术挑战、应对策略以及架构设计总结一二！》<h4 id=\"6-2、业务工程\"><a href=\"#6-2、业务工程\" class=\"headerlink\" title=\"6.2、业务工程\"></a>6.2、业务工程</h4></li>\n<li>说说你的开发流程、如何进行自动化部署的</li>\n<li>你和团队是如何沟通的</li>\n<li>你如何进行代码评审</li>\n<li>说说你对技术与业务的理解</li>\n<li>说说你在项目中遇到感觉最难Bug，是如何解决的</li>\n<li>介绍一下工作中的一个你认为最有价值的项目，以及在这个过程中的角色、解决的问题、你觉得你们项目还有哪些不足的地方<h4 id=\"6-3、软实力\"><a href=\"#6-3、软实力\" class=\"headerlink\" title=\"6.3、软实力\"></a>6.3、软实力</h4></li>\n<li>说说你的优缺点、亮点</li>\n<li>说说你最近在看什么书、什么博客、在研究什么新技术、再看那些开源项目的源代码</li>\n<li>说说你觉得最有意义的技术书籍</li>\n<li>工作之余做什么事情、平时是如何学习的，怎样提升自己的能力</li>\n<li>说说个人发展方向方面的思考</li>\n<li>说说你认为的服务端开发工程师应该具备哪些能力</li>\n<li>说说你认为的架构师是什么样的，架构师主要做什么</li>\n<li><p>如何看待加班的问题</p>\n<p>当然，一个完整的面试肯定不止上述的知识点，其他的诸如：Linux、数据结构、算法、逻辑思维题、系统设计题、职业规划等等都会有所涉及</p>\n</li>\n</ul>\n<p><strong>二、进阶篇</strong></p>\n<p><strong>三、高级篇</strong></p>\n<p><strong>四、架构篇</strong></p>\n","site":{"data":{}},"excerpt":"<p>Java工程师成神之路<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"一、基础篇\"><a href=\"#一、基础篇\" class=\"headerlink\" title=\"一、基础篇\"></a><strong>一、基础篇</strong></h3><h4 id=\"1-1、Java基础\"><a href=\"#1-1、Java基础\" class=\"headerlink\" title=\"1.1、Java基础\"></a>1.1、Java基础</h4><ul>\n<li>面向对象的特征：继承、封装和多态</li>\n<li>final, finally, finalize 的区别</li>\n<li>Exception、Error、运行时异常与一般异常有何异同</li>\n<li>请写出5种常见到的runtime exception</li>\n<li>int 和 Integer 有什么区别，Integer的值缓存范围</li>\n<li>包装类，装箱和拆箱</li>\n<li>String、StringBuilder、StringBuffer</li>\n<li>重载和重写的区别</li>\n<li>抽象类和接口有什么区别</li>\n<li>说说反射的用途及实现</li>\n<li>说说自定义注解的场景及实现</li>\n<li>HTTP请求的GET与POST方式的区别</li>\n<li>Session与Cookie区别</li>\n<li>列出自己常用的JDK包</li>\n<li>MVC设计思想</li>\n<li>equals与==的区别</li>\n<li>hashCode和equals方法的区别与联系</li>\n<li>什么是Java序列化和反序列化，如何实现Java序列化？或者请解释Serializable 接口的作用</li>\n<li>Object类中常见的方法，为什么wait  notify会放在Object里边？</li>\n<li>Java的平台无关性如何体现出来的</li>\n<li>JDK和JRE的区别</li>\n<li>Java 8有哪些新特性<h4 id=\"1-2、Java常见集合\"><a href=\"#1-2、Java常见集合\" class=\"headerlink\" title=\"1.2、Java常见集合\"></a>1.2、Java常见集合</h4></li>\n<li>List 和 Set 区别</li>\n<li>Set和hashCode以及equals方法的联系</li>\n<li>List 和 Map 区别</li>\n<li>Arraylist 与 LinkedList 区别</li>\n<li>ArrayList 与 Vector 区别</li>\n<li>HashMap 和 Hashtable 的区别</li>\n<li>HashSet 和 HashMap 区别</li>\n<li>HashMap 和 ConcurrentHashMap 的区别</li>\n<li>HashMap 的工作原理及代码实现，什么时候用到红黑树</li>\n<li>多线程情况下HashMap死循环的问题</li>\n<li>HashMap出现Hash DOS攻击的问题</li>\n<li>ConcurrentHashMap 的工作原理及代码实现，如何统计所有的元素个数</li>\n<li>手写简单的HashMap</li>\n<li>看过那些Java集合类的源码<h4 id=\"1-3、进程和线程\"><a href=\"#1-3、进程和线程\" class=\"headerlink\" title=\"1.3、进程和线程\"></a>1.3、进程和线程</h4></li>\n<li>线程和进程的概念、并行和并发的概念</li>\n<li>创建线程的方式及实现</li>\n<li>进程间通信的方式</li>\n<li>说说 CountDownLatch、CyclicBarrier 原理和区别</li>\n<li>说说 Semaphore 原理</li>\n<li>说说 Exchanger 原理</li>\n<li>ThreadLocal 原理分析，ThreadLocal为什么会出现OOM，出现的深层次原理</li>\n<li>讲讲线程池的实现原理</li>\n<li>线程池的几种实现方式</li>\n<li>线程的生命周期，状态是如何转移的<br>可参考：《Java多线程编程核心技术》<h4 id=\"1-4、锁机制\"><a href=\"#1-4、锁机制\" class=\"headerlink\" title=\"1.4、锁机制\"></a>1.4、锁机制</h4></li>\n<li>说说线程安全问题，什么是线程安全，如何保证线程安全</li>\n<li>重入锁的概念，重入锁为什么可以防止死锁</li>\n<li>产生死锁的四个条件（互斥、请求与保持、不剥夺、循环等待）</li>\n<li>如何检查死锁（通过jConsole检查死锁）</li>\n<li>volatile 实现原理（禁止指令重排、刷新内存）</li>\n<li>synchronized 实现原理（对象监视器）</li>\n<li>synchronized 与 lock 的区别</li>\n<li>AQS同步队列</li>\n<li>CAS无锁的概念、乐观锁和悲观锁</li>\n<li>常见的原子操作类</li>\n<li>什么是ABA问题，出现ABA问题JDK是如何解决的</li>\n<li>乐观锁的业务场景及实现方式</li>\n<li>Java 8并法包下常见的并发类</li>\n<li>偏向锁、轻量级锁、重量级锁、自旋锁的概念<br>可参考：《Java多线程编程核心技术》<h4 id=\"1-5、JVM\"><a href=\"#1-5、JVM\" class=\"headerlink\" title=\"1.5、JVM\"></a>1.5、JVM</h4></li>\n<li>JVM运行时内存区域划分</li>\n<li>内存溢出OOM和堆栈溢出SOE的示例及原因、如何排查与解决</li>\n<li>如何判断对象是否可以回收或存活</li>\n<li>常见的GC回收算法及其含义</li>\n<li>常见的JVM性能监控和故障处理工具类：jps、jstat、jmap、jinfo、jconsole等</li>\n<li>JVM如何设置参数</li>\n<li>JVM性能调优</li>\n<li>类加载器、双亲委派模型、一个类的生命周期、类是如何加载到JVM中的</li>\n<li>类加载的过程：加载、验证、准备、解析、初始化</li>\n<li>强引用、软引用、弱引用、虚引用</li>\n<li>Java内存模型JMM<h4 id=\"1-6、设计模式\"><a href=\"#1-6、设计模式\" class=\"headerlink\" title=\"1.6、设计模式\"></a>1.6、设计模式</h4></li>\n<li>常见的设计模式</li>\n<li>设计模式的的六大原则及其含义</li>\n<li>常见的单例模式以及各种实现方式的优缺点，哪一种最好，手写常见的单利模式</li>\n<li>设计模式在实际场景中的应用</li>\n<li>Spring中用到了哪些设计模式</li>\n<li>MyBatis中用到了哪些设计模式</li>\n<li>你项目中有使用哪些设计模式</li>\n<li>说说常用开源框架中设计模式使用分析<br> 动态代理很重要！！！<h4 id=\"1-7、数据结构\"><a href=\"#1-7、数据结构\" class=\"headerlink\" title=\"1.7、数据结构\"></a>1.7、数据结构</h4></li>\n<li>树（二叉查找树、平衡二叉树、红黑树、B树、B+树）</li>\n<li>深度有限算法、广度优先算法</li>\n<li>克鲁斯卡尔算法、普林母算法、迪克拉斯算法</li>\n<li>什么是一致性Hash及其原理、Hash环问题</li>\n<li>常见的排序算法和查找算法：快排、折半查找、堆排序等<h4 id=\"1-8、网络-IO基础\"><a href=\"#1-8、网络-IO基础\" class=\"headerlink\" title=\"1.8、网络/IO基础\"></a>1.8、网络/IO基础</h4></li>\n<li>BIO、NIO、AIO的概念</li>\n<li>什么是长连接和短连接</li>\n<li>Http1.0和2.0相比有什么区别，可参考《Http 2.0》</li>\n<li>Https的基本概念</li>\n<li>三次握手和四次挥手、为什么挥手需要四次</li>\n<li>从游览器中输入URL到页面加载的发生了什么？可参考《从输入URL到页面加载发生了什么》<h3 id=\"二、数据存储和消息队列\"><a href=\"#二、数据存储和消息队列\" class=\"headerlink\" title=\"二、数据存储和消息队列\"></a>二、数据存储和消息队列</h3><h4 id=\"2-1、数据库\"><a href=\"#2-1、数据库\" class=\"headerlink\" title=\"2.1、数据库\"></a>2.1、数据库</h4></li>\n<li>MySQL 索引使用的注意事项</li>\n<li>DDL、DML、DCL分别指什么</li>\n<li>explain命令</li>\n<li>left join，right join，inner join</li>\n<li>数据库事物ACID（原子性、一致性、隔离性、持久性）</li>\n<li>事物的隔离级别（读未提交、读以提交、可重复读、可序列化读）</li>\n<li>脏读、幻读、不可重复读</li>\n<li>数据库的几大范式</li>\n<li>数据库常见的命令</li>\n<li>说说分库与分表设计</li>\n<li>分库与分表带来的分布式困境与应对之策（如何解决分布式下的分库分表，全局表？）</li>\n<li>说说 SQL 优化之道</li>\n<li>MySQL遇到的死锁问题、如何排查与解决</li>\n<li>存储引擎的 InnoDB与MyISAM区别，优缺点，使用场景</li>\n<li>索引类别（B+树索引、全文索引、哈希索引）、索引的原理</li>\n<li>什么是自适应哈希索引（AHI）</li>\n<li>为什么要用 B+tree作为MySQL索引的数据结构</li>\n<li>聚集索引与非聚集索引的区别</li>\n<li>遇到过索引失效的情况没，什么时候可能会出现，如何解决</li>\n<li>limit 20000 加载很慢怎么解决</li>\n<li>如何选择合适的分布式主键方案</li>\n<li>选择合适的数据存储方案</li>\n<li>常见的几种分布式ID的设计方案</li>\n<li>常见的数据库优化方案，在你的项目中数据库如何进行优化的<h4 id=\"2-2、Redis\"><a href=\"#2-2、Redis\" class=\"headerlink\" title=\"2.2、Redis\"></a>2.2、Redis</h4></li>\n<li>Redis 有哪些数据类型，可参考《Redis常见的5种不同的数据类型详解》</li>\n<li>Redis 内部结构</li>\n<li>Redis 使用场景</li>\n<li>Redis 持久化机制，可参考《使用快照和AOF将Redis数据持久化到硬盘中》</li>\n<li>Redis 集群方案与实现</li>\n<li>Redis 为什么是单线程的？</li>\n<li>缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级</li>\n<li>使用缓存的合理性问题</li>\n<li>Redis常见的回收策略<h4 id=\"2-3、消息队列\"><a href=\"#2-3、消息队列\" class=\"headerlink\" title=\"2.3、消息队列\"></a>2.3、消息队列</h4></li>\n<li>消息队列的使用场景</li>\n<li>消息的重发补偿解决思路</li>\n<li>消息的幂等性解决思路</li>\n<li>消息的堆积解决思路</li>\n<li>自己如何实现消息队列</li>\n<li>如何保证消息的有序性<h3 id=\"三、开源框架和容器\"><a href=\"#三、开源框架和容器\" class=\"headerlink\" title=\"三、开源框架和容器\"></a>三、开源框架和容器</h3><h4 id=\"3-1、SSM-Servlet\"><a href=\"#3-1、SSM-Servlet\" class=\"headerlink\" title=\"3.1、SSM/Servlet\"></a>3.1、SSM/Servlet</h4></li>\n<li>Servlet的生命周期</li>\n<li>转发与重定向的区别</li>\n<li>BeanFactory 和 ApplicationContext 有什么区别</li>\n<li>Spring Bean 的生命周期</li>\n<li>Spring IOC 如何实现</li>\n<li>Spring中Bean的作用域，默认的是哪一个</li>\n<li>说说 Spring AOP、Spring AOP 实现原理</li>\n<li>动态代理（CGLib 与 JDK）、优缺点、性能对比、如何选择</li>\n<li>Spring 事务实现方式、事务的传播机制、默认的事务类别</li>\n<li>Spring 事务底层原理</li>\n<li>Spring事务失效（事务嵌套），JDK动态代理给Spring事务埋下的坑，可参考《JDK动态代理给Spring事务埋下的坑！》</li>\n<li>如何自定义注解实现功能</li>\n<li>Spring MVC 运行流程</li>\n<li>Spring MVC 启动流程</li>\n<li>Spring 的单例实现原理</li>\n<li>Spring 框架中用到了哪些设计模式</li>\n<li>Spring 其他产品（Srping Boot、Spring Cloud、Spring Secuirity、Spring Data、Spring AMQP 等）</li>\n<li>有没有用到Spring Boot，Spring Boot的认识、原理</li>\n<li>MyBatis的原理<br>  可参考《为什么会有Spring》<br>  可参考《为什么会有Spring AOP》<h4 id=\"3-2、Netty\"><a href=\"#3-2、Netty\" class=\"headerlink\" title=\"3.2、Netty\"></a>3.2、Netty</h4></li>\n<li>为什么选择 Netty</li>\n<li>说说业务中，Netty 的使用场景</li>\n<li>原生的 NIO 在 JDK 1.7 版本存在 epoll bug</li>\n<li>什么是TCP 粘包/拆包</li>\n<li>TCP粘包/拆包的解决办法</li>\n<li>Netty 线程模型</li>\n<li>说说 Netty 的零拷贝</li>\n<li>Netty 内部执行流程</li>\n<li>Netty 重连实现<h4 id=\"3-3、Tomcat\"><a href=\"#3-3、Tomcat\" class=\"headerlink\" title=\"3.3、Tomcat\"></a>3.3、Tomcat</h4></li>\n<li>Tomcat的基础架构（Server、Service、Connector、Container）</li>\n<li>Tomcat如何加载Servlet的</li>\n<li>Pipeline-Valve机制<br>  可参考：《四张图带你了解Tomcat系统架构！》<h3 id=\"四、分布式\"><a href=\"#四、分布式\" class=\"headerlink\" title=\"四、分布式\"></a>四、分布式</h3><h4 id=\"4-1、Nginx\"><a href=\"#4-1、Nginx\" class=\"headerlink\" title=\"4.1、Nginx\"></a>4.1、Nginx</h4></li>\n<li>请解释什么是C10K问题或者知道什么是C10K问题吗？</li>\n<li>Nginx简介，可参考《Nginx简介》</li>\n<li>正向代理和反向代理.</li>\n<li>Nginx几种常见的负载均衡策略</li>\n<li>Nginx服务器上的Master和Worker进程分别是什么</li>\n<li>使用“反向代理服务器”的优点是什么?<h4 id=\"4-2、分布式其他\"><a href=\"#4-2、分布式其他\" class=\"headerlink\" title=\"4.2、分布式其他\"></a>4.2、分布式其他</h4></li>\n<li>谈谈业务中使用分布式的场景</li>\n<li>Session 分布式方案</li>\n<li>Session 分布式处理</li>\n<li>分布式锁的应用场景、分布式锁的产生原因、基本概念</li>\n<li>分布是锁的常见解决方案</li>\n<li>分布式事务的常见解决方案</li>\n<li>集群与负载均衡的算法与实现</li>\n<li>说说分库与分表设计，可参考《数据库分库分表策略的具体实现方案》</li>\n<li>分库与分表带来的分布式困境与应对之策<h4 id=\"4-3、Dubbo\"><a href=\"#4-3、Dubbo\" class=\"headerlink\" title=\"4.3、Dubbo\"></a>4.3、Dubbo</h4></li>\n<li>什么是Dubbo，可参考《Dubbo入门》</li>\n<li>什么是RPC、如何实现RPC、RPC 的实现原理，可参考《基于HTTP的RPC实现》</li>\n<li>Dubbo中的SPI是什么概念</li>\n<li>Dubbo的基本原理、执行流程<h3 id=\"五、微服务\"><a href=\"#五、微服务\" class=\"headerlink\" title=\"五、微服务\"></a>五、微服务</h3><h4 id=\"5-1、微服务\"><a href=\"#5-1、微服务\" class=\"headerlink\" title=\"5.1、微服务\"></a>5.1、微服务</h4></li>\n<li>前后端分离是如何做的？</li>\n<li>微服务哪些框架</li>\n<li>Spring Could的常见组件有哪些？可参考《Spring Cloud概述》</li>\n<li>领域驱动有了解吗？什么是领域驱动模型？充血模型、贫血模型</li>\n<li>JWT有了解吗，什么是JWT，可参考《前后端分离利器之JWT》</li>\n<li>你怎么理解 RESTful</li>\n<li>说说如何设计一个良好的 API</li>\n<li>如何理解 RESTful API 的幂等性</li>\n<li>如何保证接口的幂等性</li>\n<li>说说 CAP 定理、BASE 理论</li>\n<li>怎么考虑数据一致性问题</li>\n<li>说说最终一致性的实现方案</li>\n<li>微服务的优缺点，可参考《微服务批判》</li>\n<li>微服务与 SOA 的区别</li>\n<li>如何拆分服务、水平分割、垂直分割</li>\n<li>如何应对微服务的链式调用异常</li>\n<li>如何快速追踪与定位问题</li>\n<li>如何保证微服务的安全、认证<h4 id=\"5-2、安全问题\"><a href=\"#5-2、安全问题\" class=\"headerlink\" title=\"5.2、安全问题\"></a>5.2、安全问题</h4></li>\n<li>如何防范常见的Web攻击、如何方式SQL注入</li>\n<li>服务端通信安全攻防</li>\n<li>HTTPS原理剖析、降级攻击、HTTP与HTTPS的对比<h4 id=\"5-3、性能优化\"><a href=\"#5-3、性能优化\" class=\"headerlink\" title=\"5.3、性能优化\"></a>5.3、性能优化</h4></li>\n<li>性能指标有哪些</li>\n<li>如何发现性能瓶颈</li>\n<li>性能调优的常见手段</li>\n<li>说说你在项目中如何进行性能调优<h3 id=\"六、其他\"><a href=\"#六、其他\" class=\"headerlink\" title=\"六、其他\"></a>六、其他</h3><h4 id=\"6-1、设计能力\"><a href=\"#6-1、设计能力\" class=\"headerlink\" title=\"6.1、设计能力\"></a>6.1、设计能力</h4></li>\n<li>说说你在项目中使用过的UML图</li>\n<li>你如何考虑组件化、服务化、系统拆分</li>\n<li>秒杀场景如何设计<br>可参考：《秒杀系统的技术挑战、应对策略以及架构设计总结一二！》<h4 id=\"6-2、业务工程\"><a href=\"#6-2、业务工程\" class=\"headerlink\" title=\"6.2、业务工程\"></a>6.2、业务工程</h4></li>\n<li>说说你的开发流程、如何进行自动化部署的</li>\n<li>你和团队是如何沟通的</li>\n<li>你如何进行代码评审</li>\n<li>说说你对技术与业务的理解</li>\n<li>说说你在项目中遇到感觉最难Bug，是如何解决的</li>\n<li>介绍一下工作中的一个你认为最有价值的项目，以及在这个过程中的角色、解决的问题、你觉得你们项目还有哪些不足的地方<h4 id=\"6-3、软实力\"><a href=\"#6-3、软实力\" class=\"headerlink\" title=\"6.3、软实力\"></a>6.3、软实力</h4></li>\n<li>说说你的优缺点、亮点</li>\n<li>说说你最近在看什么书、什么博客、在研究什么新技术、再看那些开源项目的源代码</li>\n<li>说说你觉得最有意义的技术书籍</li>\n<li>工作之余做什么事情、平时是如何学习的，怎样提升自己的能力</li>\n<li>说说个人发展方向方面的思考</li>\n<li>说说你认为的服务端开发工程师应该具备哪些能力</li>\n<li>说说你认为的架构师是什么样的，架构师主要做什么</li>\n<li><p>如何看待加班的问题</p>\n<p>当然，一个完整的面试肯定不止上述的知识点，其他的诸如：Linux、数据结构、算法、逻辑思维题、系统设计题、职业规划等等都会有所涉及</p>\n</li>\n</ul>\n<p><strong>二、进阶篇</strong></p>\n<p><strong>三、高级篇</strong></p>\n<p><strong>四、架构篇</strong></p>"},{"title":"Centos7上安装Docker","author":"Leonard","cover_picture":"/images/docker.jpg","date":"2018-08-30T03:26:00.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n#### 一、What is Docker? \n正如[Docker官网](https://docs.docker.com/)介绍的那样：\n\n\tDocker is the world’s leading software containerization platform.\n \n\nDocker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。\n\nDocker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\n\n容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\n\n#### 二、Centos7安装Docker\n\n1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。\n\n通过 uname -r 命令查看你当前的内核版本\n\n    $ uname -r\n2、使用 root 权限登录 Centos。确保 yum 包更新到最新。\n\n    $ sudo yum update\n3、卸载旧版本(如果安装过旧版本的话)\n\n    $ sudo yum remove docker  docker-common docker-selinux docker-engine\n4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的\n\n    $ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n5、设置yum源\n\n    $ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n![upload successful](\\images\\docker\\pasted-1.png)\n6、可以查看所有仓库中所有docker版本，并选择特定版本安装\n\n    $ yum list docker-ce --showduplicates | sort -r\n![upload successful](\\images\\docker\\pasted-0.png)\n\n7、安装docker\n\n    $ sudo yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0\n    $ sudo yum install <FQPN>  # 例如：sudo yum install docker-ce-17.12.0.ce\n    \n![upload successful](\\images\\docker\\pasted-2.png)\n\n8、启动并加入开机启动\n\n    $ sudo systemctl start docker\n    $ sudo systemctl enable docker\n9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)\n\n    $ docker version\n       \n![upload successful](\\images\\docker\\pasted-3.png)","source":"_posts/Centos7上安装docker.md","raw":"title: Centos7上安装Docker\nauthor: Leonard\ncover_picture: /images/docker.jpg\ntags: []\ncategories:\n  - 研发工具\ndate: 2018-08-30 11:26:00\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n#### 一、What is Docker? \n正如[Docker官网](https://docs.docker.com/)介绍的那样：\n\n\tDocker is the world’s leading software containerization platform.\n \n\nDocker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。\n\nDocker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\n\n容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\n\n#### 二、Centos7安装Docker\n\n1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。\n\n通过 uname -r 命令查看你当前的内核版本\n\n    $ uname -r\n2、使用 root 权限登录 Centos。确保 yum 包更新到最新。\n\n    $ sudo yum update\n3、卸载旧版本(如果安装过旧版本的话)\n\n    $ sudo yum remove docker  docker-common docker-selinux docker-engine\n4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的\n\n    $ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n5、设置yum源\n\n    $ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n![upload successful](\\images\\docker\\pasted-1.png)\n6、可以查看所有仓库中所有docker版本，并选择特定版本安装\n\n    $ yum list docker-ce --showduplicates | sort -r\n![upload successful](\\images\\docker\\pasted-0.png)\n\n7、安装docker\n\n    $ sudo yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0\n    $ sudo yum install <FQPN>  # 例如：sudo yum install docker-ce-17.12.0.ce\n    \n![upload successful](\\images\\docker\\pasted-2.png)\n\n8、启动并加入开机启动\n\n    $ sudo systemctl start docker\n    $ sudo systemctl enable docker\n9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)\n\n    $ docker version\n       \n![upload successful](\\images\\docker\\pasted-3.png)","slug":"Centos7上安装docker","published":1,"updated":"2018-09-06T10:50:40.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlqgwft60002estjb7memnkq","content":"<p><strong> Centos7上安装Docker：</strong> <Excerpt in index | 首页摘要><br>分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h4 id=\"一、What-is-Docker\"><a href=\"#一、What-is-Docker\" class=\"headerlink\" title=\"一、What is Docker?\"></a>一、What is Docker?</h4><p>正如<a href=\"https://docs.docker.com/\">Docker官网</a>介绍的那样：</p>\n<pre><code>Docker is the world’s leading software containerization platform.\n</code></pre><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。</p>\n<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>\n<h4 id=\"二、Centos7安装Docker\"><a href=\"#二、Centos7安装Docker\" class=\"headerlink\" title=\"二、Centos7安装Docker\"></a>二、Centos7安装Docker</h4><p>1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p>\n<p>通过 uname -r 命令查看你当前的内核版本</p>\n<pre><code>$ uname -r\n</code></pre><p>2、使用 root 权限登录 Centos。确保 yum 包更新到最新。</p>\n<pre><code>$ sudo yum update\n</code></pre><p>3、卸载旧版本(如果安装过旧版本的话)</p>\n<pre><code>$ sudo yum remove docker  docker-common docker-selinux docker-engine\n</code></pre><p>4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>\n<pre><code>$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre><p>5、设置yum源</p>\n<pre><code>$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre><p><img src=\"\\images\\docker\\pasted-1.png\" alt=\"upload successful\"><br>6、可以查看所有仓库中所有docker版本，并选择特定版本安装</p>\n<pre><code>$ yum list docker-ce --showduplicates | sort -r\n</code></pre><p><img src=\"\\images\\docker\\pasted-0.png\" alt=\"upload successful\"></p>\n<p>7、安装docker</p>\n<pre><code>$ sudo yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0\n$ sudo yum install &lt;FQPN&gt;  # 例如：sudo yum install docker-ce-17.12.0.ce\n</code></pre><p><img src=\"\\images\\docker\\pasted-2.png\" alt=\"upload successful\"></p>\n<p>8、启动并加入开机启动</p>\n<pre><code>$ sudo systemctl start docker\n$ sudo systemctl enable docker\n</code></pre><p>9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p>\n<pre><code>$ docker version\n</code></pre><p><img src=\"\\images\\docker\\pasted-3.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"<p><strong> Centos7上安装Docker：</strong> <Excerpt in index | 首页摘要><br>分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h4 id=\"一、What-is-Docker\"><a href=\"#一、What-is-Docker\" class=\"headerlink\" title=\"一、What is Docker?\"></a>一、What is Docker?</h4><p>正如<a href=\"https://docs.docker.com/\">Docker官网</a>介绍的那样：</p>\n<pre><code>Docker is the world’s leading software containerization platform.\n</code></pre><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。</p>\n<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>\n<h4 id=\"二、Centos7安装Docker\"><a href=\"#二、Centos7安装Docker\" class=\"headerlink\" title=\"二、Centos7安装Docker\"></a>二、Centos7安装Docker</h4><p>1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p>\n<p>通过 uname -r 命令查看你当前的内核版本</p>\n<pre><code>$ uname -r\n</code></pre><p>2、使用 root 权限登录 Centos。确保 yum 包更新到最新。</p>\n<pre><code>$ sudo yum update\n</code></pre><p>3、卸载旧版本(如果安装过旧版本的话)</p>\n<pre><code>$ sudo yum remove docker  docker-common docker-selinux docker-engine\n</code></pre><p>4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>\n<pre><code>$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre><p>5、设置yum源</p>\n<pre><code>$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre><p><img src=\"\\images\\docker\\pasted-1.png\" alt=\"upload successful\"><br>6、可以查看所有仓库中所有docker版本，并选择特定版本安装</p>\n<pre><code>$ yum list docker-ce --showduplicates | sort -r\n</code></pre><p><img src=\"\\images\\docker\\pasted-0.png\" alt=\"upload successful\"></p>\n<p>7、安装docker</p>\n<pre><code>$ sudo yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0\n$ sudo yum install &lt;FQPN&gt;  # 例如：sudo yum install docker-ce-17.12.0.ce\n</code></pre><p><img src=\"\\images\\docker\\pasted-2.png\" alt=\"upload successful\"></p>\n<p>8、启动并加入开机启动</p>\n<pre><code>$ sudo systemctl start docker\n$ sudo systemctl enable docker\n</code></pre><p>9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p>\n<pre><code>$ docker version\n</code></pre><p><img src=\"\\images\\docker\\pasted-3.png\" alt=\"upload successful\"></p>"},{"title":"分布式系统理论基础","date":"2018-02-26T14:31:40.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## CAP理论\n定理：任何分布式架构都只能同时满足两点，无法三者兼顾。\n* Consistency（一致性），数据一致更新，所有的数据变动都是同步的。\n* Availability（可用性），好的响应性能。\n* Partition tolerance（分区容忍性）可靠性，机器宕机是否影响使用。\n\n关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：\n1. Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。\n2. Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。\n3. Isolation隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。\n4. Durability持久性 一旦事务完成，就不能返回。\n跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland)\n是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。\n\n## BASE理论\n* Basically Available 基本可用，支持分区失败\n* Soft state 软状态，允许状态某个时间短不同步，或者异步\n* Eventually consistent 最终一致性，要求数据最终结果一致，而不是时刻高度一致。\n\n## paxos协议\nPaxos算法的目的是为了解决分布式环境下一致性的问题。多个节点并发操纵数据，如何保证在读写过程中数据的一致性，并且解决方案要能适应分布式环境下的不可靠性（系统如何就一个值达到统一）。\n### Paxos的两个组件:\n* Proposer：提议发起者，处理客户端请求，将客户端的请求发送到集群中，以便决定这个值是否可以被批准。\n* Acceptor:提议批准者，负责处理接收到的提议，他们的回复就是一次投票。会存储一些状态来决定是否接收一个值\n\n### Paxos有两个原则\n1. 安全原则---保证不能做错的事\n    * a） 针对某个实例的表决只能有一个值被批准，不能出现一个被批准的值被另一个值覆盖的情况；(假设有一个值被多数Acceptor批准了，那么这个值就只能被学习)\n    * b） 每个节点只能学习到已经被批准的值，不能学习没有被批准的值。\n2. 存活原则---只要有多数服务器存活并且彼此间可以通信，最终都要做到的下列事情：\n    * a）最终会批准某个被提议的值；\n    * b）一个值被批准了，其他服务器最终会学习到这个值。\n\n## zab协议(ZooKeeper Atomic broadcast protocol)\nZAB协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n### Phase 0: Leader election（选举阶段）\n节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。\n\n### Phase 1: Discovery（发现阶段）\n在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且准 leader 生成新的 epoch，让 followers 接受，更新它们的 acceptedEpoch。\n一个 follower 只会连接一个 leader，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。\n\n### Phase 2: Synchronization（同步阶段）\n同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。\n\n### Phase 3: Broadcast（广播阶段）\n到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。\n\n## raft协议\n在Raft中，每个结点会处于下面三种状态中的一种：\n### follower\n所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态。\n### candidate\n会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)\n### leader\n所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：\n\n    1. 复制日志到所有follower结点(replicate entry)\n    2. 大部分结点响应时才提交日志\n    3. 通知所有follower结点日志已提交\n    4. 所有follower也提交日志\n    5. 现在整个系统处于一致的状态\n\n\n\n","source":"_posts/dsbasic.md","raw":"title: 分布式系统理论基础\ndate: 2018-02-26 22:31:40\ntags: protocol\ncategories: 分布式架构\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## CAP理论\n定理：任何分布式架构都只能同时满足两点，无法三者兼顾。\n* Consistency（一致性），数据一致更新，所有的数据变动都是同步的。\n* Availability（可用性），好的响应性能。\n* Partition tolerance（分区容忍性）可靠性，机器宕机是否影响使用。\n\n关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：\n1. Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。\n2. Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。\n3. Isolation隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。\n4. Durability持久性 一旦事务完成，就不能返回。\n跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland)\n是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。\n\n## BASE理论\n* Basically Available 基本可用，支持分区失败\n* Soft state 软状态，允许状态某个时间短不同步，或者异步\n* Eventually consistent 最终一致性，要求数据最终结果一致，而不是时刻高度一致。\n\n## paxos协议\nPaxos算法的目的是为了解决分布式环境下一致性的问题。多个节点并发操纵数据，如何保证在读写过程中数据的一致性，并且解决方案要能适应分布式环境下的不可靠性（系统如何就一个值达到统一）。\n### Paxos的两个组件:\n* Proposer：提议发起者，处理客户端请求，将客户端的请求发送到集群中，以便决定这个值是否可以被批准。\n* Acceptor:提议批准者，负责处理接收到的提议，他们的回复就是一次投票。会存储一些状态来决定是否接收一个值\n\n### Paxos有两个原则\n1. 安全原则---保证不能做错的事\n    * a） 针对某个实例的表决只能有一个值被批准，不能出现一个被批准的值被另一个值覆盖的情况；(假设有一个值被多数Acceptor批准了，那么这个值就只能被学习)\n    * b） 每个节点只能学习到已经被批准的值，不能学习没有被批准的值。\n2. 存活原则---只要有多数服务器存活并且彼此间可以通信，最终都要做到的下列事情：\n    * a）最终会批准某个被提议的值；\n    * b）一个值被批准了，其他服务器最终会学习到这个值。\n\n## zab协议(ZooKeeper Atomic broadcast protocol)\nZAB协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n### Phase 0: Leader election（选举阶段）\n节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。\n\n### Phase 1: Discovery（发现阶段）\n在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且准 leader 生成新的 epoch，让 followers 接受，更新它们的 acceptedEpoch。\n一个 follower 只会连接一个 leader，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。\n\n### Phase 2: Synchronization（同步阶段）\n同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。\n\n### Phase 3: Broadcast（广播阶段）\n到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。\n\n## raft协议\n在Raft中，每个结点会处于下面三种状态中的一种：\n### follower\n所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态。\n### candidate\n会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)\n### leader\n所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：\n\n    1. 复制日志到所有follower结点(replicate entry)\n    2. 大部分结点响应时才提交日志\n    3. 通知所有follower结点日志已提交\n    4. 所有follower也提交日志\n    5. 现在整个系统处于一致的状态\n\n\n\n","slug":"dsbasic","published":1,"updated":"2018-09-06T10:35:37.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlqgwftc0005estj3j2gvsaf","content":"<p><strong> 分布式系统理论基础：</strong> <Excerpt in index | 首页摘要><br>分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h2><p>定理：任何分布式架构都只能同时满足两点，无法三者兼顾。</p>\n<ul>\n<li>Consistency（一致性），数据一致更新，所有的数据变动都是同步的。</li>\n<li>Availability（可用性），好的响应性能。</li>\n<li>Partition tolerance（分区容忍性）可靠性，机器宕机是否影响使用。</li>\n</ul>\n<p>关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：</p>\n<ol>\n<li>Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。</li>\n<li>Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。</li>\n<li>Isolation隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。</li>\n<li>Durability持久性 一旦事务完成，就不能返回。<br>跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland)<br>是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。</li>\n</ol>\n<h2 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h2><ul>\n<li>Basically Available 基本可用，支持分区失败</li>\n<li>Soft state 软状态，允许状态某个时间短不同步，或者异步</li>\n<li>Eventually consistent 最终一致性，要求数据最终结果一致，而不是时刻高度一致。</li>\n</ul>\n<h2 id=\"paxos协议\"><a href=\"#paxos协议\" class=\"headerlink\" title=\"paxos协议\"></a>paxos协议</h2><p>Paxos算法的目的是为了解决分布式环境下一致性的问题。多个节点并发操纵数据，如何保证在读写过程中数据的一致性，并且解决方案要能适应分布式环境下的不可靠性（系统如何就一个值达到统一）。</p>\n<h3 id=\"Paxos的两个组件\"><a href=\"#Paxos的两个组件\" class=\"headerlink\" title=\"Paxos的两个组件:\"></a>Paxos的两个组件:</h3><ul>\n<li>Proposer：提议发起者，处理客户端请求，将客户端的请求发送到集群中，以便决定这个值是否可以被批准。</li>\n<li>Acceptor:提议批准者，负责处理接收到的提议，他们的回复就是一次投票。会存储一些状态来决定是否接收一个值</li>\n</ul>\n<h3 id=\"Paxos有两个原则\"><a href=\"#Paxos有两个原则\" class=\"headerlink\" title=\"Paxos有两个原则\"></a>Paxos有两个原则</h3><ol>\n<li>安全原则—保证不能做错的事<ul>\n<li>a） 针对某个实例的表决只能有一个值被批准，不能出现一个被批准的值被另一个值覆盖的情况；(假设有一个值被多数Acceptor批准了，那么这个值就只能被学习)</li>\n<li>b） 每个节点只能学习到已经被批准的值，不能学习没有被批准的值。</li>\n</ul>\n</li>\n<li>存活原则—只要有多数服务器存活并且彼此间可以通信，最终都要做到的下列事情：<ul>\n<li>a）最终会批准某个被提议的值；</li>\n<li>b）一个值被批准了，其他服务器最终会学习到这个值。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"zab协议-ZooKeeper-Atomic-broadcast-protocol\"><a href=\"#zab协议-ZooKeeper-Atomic-broadcast-protocol\" class=\"headerlink\" title=\"zab协议(ZooKeeper Atomic broadcast protocol)\"></a>zab协议(ZooKeeper Atomic broadcast protocol)</h2><p>ZAB协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p>\n<h3 id=\"Phase-0-Leader-election（选举阶段）\"><a href=\"#Phase-0-Leader-election（选举阶段）\" class=\"headerlink\" title=\"Phase 0: Leader election（选举阶段）\"></a>Phase 0: Leader election（选举阶段）</h3><p>节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。</p>\n<h3 id=\"Phase-1-Discovery（发现阶段）\"><a href=\"#Phase-1-Discovery（发现阶段）\" class=\"headerlink\" title=\"Phase 1: Discovery（发现阶段）\"></a>Phase 1: Discovery（发现阶段）</h3><p>在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且准 leader 生成新的 epoch，让 followers 接受，更新它们的 acceptedEpoch。<br>一个 follower 只会连接一个 leader，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。</p>\n<h3 id=\"Phase-2-Synchronization（同步阶段）\"><a href=\"#Phase-2-Synchronization（同步阶段）\" class=\"headerlink\" title=\"Phase 2: Synchronization（同步阶段）\"></a>Phase 2: Synchronization（同步阶段）</h3><p>同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。</p>\n<h3 id=\"Phase-3-Broadcast（广播阶段）\"><a href=\"#Phase-3-Broadcast（广播阶段）\" class=\"headerlink\" title=\"Phase 3: Broadcast（广播阶段）\"></a>Phase 3: Broadcast（广播阶段）</h3><p>到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</p>\n<h2 id=\"raft协议\"><a href=\"#raft协议\" class=\"headerlink\" title=\"raft协议\"></a>raft协议</h2><p>在Raft中，每个结点会处于下面三种状态中的一种：</p>\n<h3 id=\"follower\"><a href=\"#follower\" class=\"headerlink\" title=\"follower\"></a>follower</h3><p>所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态。</p>\n<h3 id=\"candidate\"><a href=\"#candidate\" class=\"headerlink\" title=\"candidate\"></a>candidate</h3><p>会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)</p>\n<h3 id=\"leader\"><a href=\"#leader\" class=\"headerlink\" title=\"leader\"></a>leader</h3><p>所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：</p>\n<pre><code>1. 复制日志到所有follower结点(replicate entry)\n2. 大部分结点响应时才提交日志\n3. 通知所有follower结点日志已提交\n4. 所有follower也提交日志\n5. 现在整个系统处于一致的状态\n</code></pre>","site":{"data":{}},"excerpt":"<p><strong> 分布式系统理论基础：</strong> <Excerpt in index | 首页摘要><br>分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h2><p>定理：任何分布式架构都只能同时满足两点，无法三者兼顾。</p>\n<ul>\n<li>Consistency（一致性），数据一致更新，所有的数据变动都是同步的。</li>\n<li>Availability（可用性），好的响应性能。</li>\n<li>Partition tolerance（分区容忍性）可靠性，机器宕机是否影响使用。</li>\n</ul>\n<p>关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：</p>\n<ol>\n<li>Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。</li>\n<li>Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。</li>\n<li>Isolation隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。</li>\n<li>Durability持久性 一旦事务完成，就不能返回。<br>跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland)<br>是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。</li>\n</ol>\n<h2 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h2><ul>\n<li>Basically Available 基本可用，支持分区失败</li>\n<li>Soft state 软状态，允许状态某个时间短不同步，或者异步</li>\n<li>Eventually consistent 最终一致性，要求数据最终结果一致，而不是时刻高度一致。</li>\n</ul>\n<h2 id=\"paxos协议\"><a href=\"#paxos协议\" class=\"headerlink\" title=\"paxos协议\"></a>paxos协议</h2><p>Paxos算法的目的是为了解决分布式环境下一致性的问题。多个节点并发操纵数据，如何保证在读写过程中数据的一致性，并且解决方案要能适应分布式环境下的不可靠性（系统如何就一个值达到统一）。</p>\n<h3 id=\"Paxos的两个组件\"><a href=\"#Paxos的两个组件\" class=\"headerlink\" title=\"Paxos的两个组件:\"></a>Paxos的两个组件:</h3><ul>\n<li>Proposer：提议发起者，处理客户端请求，将客户端的请求发送到集群中，以便决定这个值是否可以被批准。</li>\n<li>Acceptor:提议批准者，负责处理接收到的提议，他们的回复就是一次投票。会存储一些状态来决定是否接收一个值</li>\n</ul>\n<h3 id=\"Paxos有两个原则\"><a href=\"#Paxos有两个原则\" class=\"headerlink\" title=\"Paxos有两个原则\"></a>Paxos有两个原则</h3><ol>\n<li>安全原则—保证不能做错的事<ul>\n<li>a） 针对某个实例的表决只能有一个值被批准，不能出现一个被批准的值被另一个值覆盖的情况；(假设有一个值被多数Acceptor批准了，那么这个值就只能被学习)</li>\n<li>b） 每个节点只能学习到已经被批准的值，不能学习没有被批准的值。</li>\n</ul>\n</li>\n<li>存活原则—只要有多数服务器存活并且彼此间可以通信，最终都要做到的下列事情：<ul>\n<li>a）最终会批准某个被提议的值；</li>\n<li>b）一个值被批准了，其他服务器最终会学习到这个值。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"zab协议-ZooKeeper-Atomic-broadcast-protocol\"><a href=\"#zab协议-ZooKeeper-Atomic-broadcast-protocol\" class=\"headerlink\" title=\"zab协议(ZooKeeper Atomic broadcast protocol)\"></a>zab协议(ZooKeeper Atomic broadcast protocol)</h2><p>ZAB协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p>\n<h3 id=\"Phase-0-Leader-election（选举阶段）\"><a href=\"#Phase-0-Leader-election（选举阶段）\" class=\"headerlink\" title=\"Phase 0: Leader election（选举阶段）\"></a>Phase 0: Leader election（选举阶段）</h3><p>节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。</p>\n<h3 id=\"Phase-1-Discovery（发现阶段）\"><a href=\"#Phase-1-Discovery（发现阶段）\" class=\"headerlink\" title=\"Phase 1: Discovery（发现阶段）\"></a>Phase 1: Discovery（发现阶段）</h3><p>在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且准 leader 生成新的 epoch，让 followers 接受，更新它们的 acceptedEpoch。<br>一个 follower 只会连接一个 leader，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。</p>\n<h3 id=\"Phase-2-Synchronization（同步阶段）\"><a href=\"#Phase-2-Synchronization（同步阶段）\" class=\"headerlink\" title=\"Phase 2: Synchronization（同步阶段）\"></a>Phase 2: Synchronization（同步阶段）</h3><p>同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。</p>\n<h3 id=\"Phase-3-Broadcast（广播阶段）\"><a href=\"#Phase-3-Broadcast（广播阶段）\" class=\"headerlink\" title=\"Phase 3: Broadcast（广播阶段）\"></a>Phase 3: Broadcast（广播阶段）</h3><p>到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</p>\n<h2 id=\"raft协议\"><a href=\"#raft协议\" class=\"headerlink\" title=\"raft协议\"></a>raft协议</h2><p>在Raft中，每个结点会处于下面三种状态中的一种：</p>\n<h3 id=\"follower\"><a href=\"#follower\" class=\"headerlink\" title=\"follower\"></a>follower</h3><p>所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态。</p>\n<h3 id=\"candidate\"><a href=\"#candidate\" class=\"headerlink\" title=\"candidate\"></a>candidate</h3><p>会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)</p>\n<h3 id=\"leader\"><a href=\"#leader\" class=\"headerlink\" title=\"leader\"></a>leader</h3><p>所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：</p>\n<pre><code>1. 复制日志到所有follower结点(replicate entry)\n2. 大部分结点响应时才提交日志\n3. 通知所有follower结点日志已提交\n4. 所有follower也提交日志\n5. 现在整个系统处于一致的状态\n</code></pre>"},{"title":"分布式锁的几种实现方式","date":"2018-03-02T14:18:29.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 什么是分布式锁\n分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。\n\n## 分布式锁需要解决的问题\n1. 互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。\n2. 安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。\n3. 死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。\n4. 容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。\n\n## 分布式锁的实现方式\n1. 数据库实现\n\n2. 缓存实现，比如redis\n\n3. zookeeper实现\n\n## 未完待续\n","source":"_posts/dslock.md","raw":"title: 分布式锁的几种实现方式\ndate: 2018-03-02 22:18:29\ntags: java\ncategories: 分布式架构\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 什么是分布式锁\n分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。\n\n## 分布式锁需要解决的问题\n1. 互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。\n2. 安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。\n3. 死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。\n4. 容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。\n\n## 分布式锁的实现方式\n1. 数据库实现\n\n2. 缓存实现，比如redis\n\n3. zookeeper实现\n\n## 未完待续\n","slug":"dslock","published":1,"updated":"2018-09-06T10:35:37.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlqgwftf0007estjk7w9tvom","content":"<p><strong> 分布式锁的几种实现方式：</strong> <Excerpt in index | 首页摘要><br>在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"什么是分布式锁\"><a href=\"#什么是分布式锁\" class=\"headerlink\" title=\"什么是分布式锁\"></a>什么是分布式锁</h2><p>分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。</p>\n<h2 id=\"分布式锁需要解决的问题\"><a href=\"#分布式锁需要解决的问题\" class=\"headerlink\" title=\"分布式锁需要解决的问题\"></a>分布式锁需要解决的问题</h2><ol>\n<li>互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。</li>\n<li>安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。</li>\n<li>死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。</li>\n<li>容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。</li>\n</ol>\n<h2 id=\"分布式锁的实现方式\"><a href=\"#分布式锁的实现方式\" class=\"headerlink\" title=\"分布式锁的实现方式\"></a>分布式锁的实现方式</h2><ol>\n<li><p>数据库实现</p>\n</li>\n<li><p>缓存实现，比如redis</p>\n</li>\n<li><p>zookeeper实现</p>\n</li>\n</ol>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2>","site":{"data":{}},"excerpt":"<p><strong> 分布式锁的几种实现方式：</strong> <Excerpt in index | 首页摘要><br>在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"什么是分布式锁\"><a href=\"#什么是分布式锁\" class=\"headerlink\" title=\"什么是分布式锁\"></a>什么是分布式锁</h2><p>分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。</p>\n<h2 id=\"分布式锁需要解决的问题\"><a href=\"#分布式锁需要解决的问题\" class=\"headerlink\" title=\"分布式锁需要解决的问题\"></a>分布式锁需要解决的问题</h2><ol>\n<li>互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。</li>\n<li>安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。</li>\n<li>死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。</li>\n<li>容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。</li>\n</ol>\n<h2 id=\"分布式锁的实现方式\"><a href=\"#分布式锁的实现方式\" class=\"headerlink\" title=\"分布式锁的实现方式\"></a>分布式锁的实现方式</h2><ol>\n<li><p>数据库实现</p>\n</li>\n<li><p>缓存实现，比如redis</p>\n</li>\n<li><p>zookeeper实现</p>\n</li>\n</ol>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2>"},{"title":"Gitlab-CI安装","cover_picture":"/images/hexo.jpg","date":"2018-08-29T12:20:00.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\nGitLab持续集成（CI）：是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误\n<!-- more -->\n<The rest of contents | 余下全文>\n\n#### 一：安装步骤\n\n#### 1、安装\n    sudo yum install gitlab-runner\n    \n    ##查看runner配置信息\n    gitlab-runner list\n    #也可以直接打开配置文件进行查看 \n    vi /etc/gitlab-runner/config.toml\n    \n    ##部分GitLab-Runner常用命令\n    1. gitlab-runner帮助：gitlab-runner –help\n    2. gitlab-runner指定命令帮助：gitlab-runner <commond> –help\n    3. 注册runner：gitlab-runner register\n    4. 注销runner：gitlab-runner unregister\n    5. 当前运行的runner：gitlab-runner list\n    6. 启动runner：gitlab-runner start\n    7. 停止runner：gitlab-runner stop\n    8. 重启runner：gitlab-runner restart\n    9. 查询runner状态：gitlab-runner status\n    其他runner命令可以查询官网介绍：\n    https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/commands/README.md\n\n##### 2.注册runner\n    sudo gitlab-runner register\n\n #### 二：卸载步骤\n    rpm -qa|grep +你安装的名字 搜索不到证明你没有安装成功\n    rpm -ql +你安装程序的名字 这能搜索到你安装成功的程序位置。\n    rpm -e --noscripts ** 不考虑依赖卸载\n    \n    rpm -qa|grep gitlab-runner\n    \n    rpm -e gitlab-runner-11.2.0-1.x86_64\n    \n     #删除相关文件\n     find / -name gitlab-runner\n     find / -name gitlab-runner|xargs rm -rf\n    ","source":"_posts/gitlab-ci.md","raw":"title:  Gitlab-CI安装\ncover_picture: /images/hexo.jpg\ntags: []\ncategories:\n  - 研发工具\ndate: 2018-08-29 20:20:00\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\nGitLab持续集成（CI）：是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误\n<!-- more -->\n<The rest of contents | 余下全文>\n\n#### 一：安装步骤\n\n#### 1、安装\n    sudo yum install gitlab-runner\n    \n    ##查看runner配置信息\n    gitlab-runner list\n    #也可以直接打开配置文件进行查看 \n    vi /etc/gitlab-runner/config.toml\n    \n    ##部分GitLab-Runner常用命令\n    1. gitlab-runner帮助：gitlab-runner –help\n    2. gitlab-runner指定命令帮助：gitlab-runner <commond> –help\n    3. 注册runner：gitlab-runner register\n    4. 注销runner：gitlab-runner unregister\n    5. 当前运行的runner：gitlab-runner list\n    6. 启动runner：gitlab-runner start\n    7. 停止runner：gitlab-runner stop\n    8. 重启runner：gitlab-runner restart\n    9. 查询runner状态：gitlab-runner status\n    其他runner命令可以查询官网介绍：\n    https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/commands/README.md\n\n##### 2.注册runner\n    sudo gitlab-runner register\n\n #### 二：卸载步骤\n    rpm -qa|grep +你安装的名字 搜索不到证明你没有安装成功\n    rpm -ql +你安装程序的名字 这能搜索到你安装成功的程序位置。\n    rpm -e --noscripts ** 不考虑依赖卸载\n    \n    rpm -qa|grep gitlab-runner\n    \n    rpm -e gitlab-runner-11.2.0-1.x86_64\n    \n     #删除相关文件\n     find / -name gitlab-runner\n     find / -name gitlab-runner|xargs rm -rf\n    ","slug":"gitlab-ci","published":1,"updated":"2018-09-06T10:57:43.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlqgwfua000aestjky2bbke9","content":"<p><strong> Gitlab-CI安装：</strong> <Excerpt in index | 首页摘要><br>GitLab持续集成（CI）：是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h4 id=\"一：安装步骤\"><a href=\"#一：安装步骤\" class=\"headerlink\" title=\"一：安装步骤\"></a>一：安装步骤</h4><h4 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a>1、安装</h4><pre><code>sudo yum install gitlab-runner\n\n##查看runner配置信息\ngitlab-runner list\n#也可以直接打开配置文件进行查看 \nvi /etc/gitlab-runner/config.toml\n\n##部分GitLab-Runner常用命令\n1. gitlab-runner帮助：gitlab-runner –help\n2. gitlab-runner指定命令帮助：gitlab-runner &lt;commond&gt; –help\n3. 注册runner：gitlab-runner register\n4. 注销runner：gitlab-runner unregister\n5. 当前运行的runner：gitlab-runner list\n6. 启动runner：gitlab-runner start\n7. 停止runner：gitlab-runner stop\n8. 重启runner：gitlab-runner restart\n9. 查询runner状态：gitlab-runner status\n其他runner命令可以查询官网介绍：\nhttps://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/commands/README.md\n</code></pre><h5 id=\"2-注册runner\"><a href=\"#2-注册runner\" class=\"headerlink\" title=\"2.注册runner\"></a>2.注册runner</h5><pre><code>sudo gitlab-runner register\n</code></pre><h4 id=\"二：卸载步骤\"><a href=\"#二：卸载步骤\" class=\"headerlink\" title=\"二：卸载步骤\"></a>二：卸载步骤</h4><pre><code>rpm -qa|grep +你安装的名字 搜索不到证明你没有安装成功\nrpm -ql +你安装程序的名字 这能搜索到你安装成功的程序位置。\nrpm -e --noscripts ** 不考虑依赖卸载\n\nrpm -qa|grep gitlab-runner\n\nrpm -e gitlab-runner-11.2.0-1.x86_64\n\n #删除相关文件\n find / -name gitlab-runner\n find / -name gitlab-runner|xargs rm -rf\n</code></pre>","site":{"data":{}},"excerpt":"<p><strong> Gitlab-CI安装：</strong> <Excerpt in index | 首页摘要><br>GitLab持续集成（CI）：是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h4 id=\"一：安装步骤\"><a href=\"#一：安装步骤\" class=\"headerlink\" title=\"一：安装步骤\"></a>一：安装步骤</h4><h4 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a>1、安装</h4><pre><code>sudo yum install gitlab-runner\n\n##查看runner配置信息\ngitlab-runner list\n#也可以直接打开配置文件进行查看 \nvi /etc/gitlab-runner/config.toml\n\n##部分GitLab-Runner常用命令\n1. gitlab-runner帮助：gitlab-runner –help\n2. gitlab-runner指定命令帮助：gitlab-runner &lt;commond&gt; –help\n3. 注册runner：gitlab-runner register\n4. 注销runner：gitlab-runner unregister\n5. 当前运行的runner：gitlab-runner list\n6. 启动runner：gitlab-runner start\n7. 停止runner：gitlab-runner stop\n8. 重启runner：gitlab-runner restart\n9. 查询runner状态：gitlab-runner status\n其他runner命令可以查询官网介绍：\nhttps://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/commands/README.md\n</code></pre><h5 id=\"2-注册runner\"><a href=\"#2-注册runner\" class=\"headerlink\" title=\"2.注册runner\"></a>2.注册runner</h5><pre><code>sudo gitlab-runner register\n</code></pre><h4 id=\"二：卸载步骤\"><a href=\"#二：卸载步骤\" class=\"headerlink\" title=\"二：卸载步骤\"></a>二：卸载步骤</h4><pre><code>rpm -qa|grep +你安装的名字 搜索不到证明你没有安装成功\nrpm -ql +你安装程序的名字 这能搜索到你安装成功的程序位置。\nrpm -e --noscripts ** 不考虑依赖卸载\n\nrpm -qa|grep gitlab-runner\n\nrpm -e gitlab-runner-11.2.0-1.x86_64\n\n #删除相关文件\n find / -name gitlab-runner\n find / -name gitlab-runner|xargs rm -rf\n</code></pre>"},{"title":"Gitlab服务器搭建","cover_picture":"/images/hexo.jpg","date":"2018-08-29T12:20:00.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\nGitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n#### 一：安装步骤\n##### 1、安装\n    ##安装\n    sudo yum install gitlab-ce\n    \n    #配置itLab\n    sudo gitlab-ctl reconfigure\n    ##gitlab-ctl reconfigure\n    ##出现：ruby_block[supervise_redis_sleep] action run，会一直卡无法往下进行\n    ##解决方案：\n    ##1. 按住CTRL+C强制结束\n    ##2. 运行：sudo systemctl restart gitlab-runsvdir\n    ##3. 再次执行：sudo gitlab-ctl reconfigure\n    \n    ##启动Gitlab服务\n    sudo gitlab-ctl restart\n ##### 2、修改配置   \n\n    vi /etc/gitlab/gitlab.rb\n    \n    ## 修改客户端访问地址，配置域名\n    ## GitLab URL\n    ##! URL on which GitLab will be reachable.\n    ##! For more details on configuring external_url see:\n    ##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\n    external_url 'http://gitlab.capd.net'\n    \n    \n    ## 更改代码仓库的默认目录\n    ### For setting up different data storing directory\n    ###! Docs: https://docs.gitlab.com/omnibus/settings/configuration.html#storing-git-data-in-an-alternative-directory\n    ###! **If you want to use a single non-default directory to store git data use a\n    ###!   path that doesn't contain symlinks.**\n    git_data_dirs({\n      \"default\" => {\n        \"path\" => \"/aifs/gitlab/git-data\"\n       }\n    })\n    \n    ###### \n    #git_data_dir has been deprecated since 8.10 and was removed in 11.0. Use git_data_dirs instead.\n    ######\n    \n    ################################################################################\n    ## gitlab.yml configuration\n    ##! Docs: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/gitlab.yml.md\n    ################################################################################\n    \n    ### Email Settings\n    gitlab_rails['gitlab_email_enabled'] = true\n    gitlab_rails['gitlab_email_from'] = 'cuc-tc-capd@asiainfo.com'\n    gitlab_rails['gitlab_email_display_name'] = 'CUC TC-CAPD ADMIN'\n    gitlab_rails['gitlab_email_reply_to'] = 'cuc-tc-capd@asiainfo.com'\n    gitlab_rails['gitlab_email_subject_suffix'] = ''\n    \n    ### GitLab email server settings\n    ###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html\n    ###! **Use smtp instead of sendmail/postfix.**\n    \n    gitlab_rails['smtp_enable'] = true\n    gitlab_rails['smtp_address'] = \"mail.asiainfo.com\"\n    gitlab_rails['smtp_port'] = 25\n    gitlab_rails['smtp_user_name'] = \"cuc-tc-capd@asiainfo.com\"  ##必须是邮箱名\n    gitlab_rails['smtp_password'] = \"Gl123456\"\n    gitlab_rails['smtp_domain'] = \"asiainfo.com\"\n    gitlab_rails['smtp_authentication'] = \"login\"\n    gitlab_rails['smtp_enable_starttls_auto'] = true\n    gitlab_rails['smtp_tls'] = false\n    \n    vi /var/opt/gitlab/gitlab-rails/etc/gitlab.yml\n    \n    ##域名配置\n    ## Web server settings (note: host is the FQDN, do not include http://)\n    host: gitlab.capd.net\n    \n    ## Email settings\n    # Uncomment and set to false if you need to disable email sending from GitLab (default: true)\n    #email_from: gitlab@gitlab.capd.net\n    email_from: cuc-tc-capd@asiainfo.com\n    \n #### 二：卸载步骤\n     ## 停止gitlab\n     sudo gitlab-ctl stop\n     ## 卸载gitlab\n     sudo rpm -e gitlab-ce\n     ## 查看gitlab进程\n     ps -ef|grep gitlab\n     \n     ## 杀掉第一个守护进程\n     kill -9 6031\n     # 再次查看gitlab进程是否存在\n     ps -ef|grep gitlab\n     \n     ## 删除gitlab文件\n     #  删除所有包含gitlab的文件及目录\n     find / -name gitlab|xargs rm -rf\n\n修改gitlab.rb、gitlab.yml需重启服务\n\n    sudo gitlab-ctl reconfigure\n    sudo gitlab-ctl restart\n    sudo gitlab-ctl status\n","source":"_posts/gitlab-ce.md","raw":"title:  Gitlab服务器搭建\ncover_picture: /images/hexo.jpg\ntags: []\ncategories:\n  - 研发工具\ndate: 2018-08-29 20:20:00\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\nGitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n#### 一：安装步骤\n##### 1、安装\n    ##安装\n    sudo yum install gitlab-ce\n    \n    #配置itLab\n    sudo gitlab-ctl reconfigure\n    ##gitlab-ctl reconfigure\n    ##出现：ruby_block[supervise_redis_sleep] action run，会一直卡无法往下进行\n    ##解决方案：\n    ##1. 按住CTRL+C强制结束\n    ##2. 运行：sudo systemctl restart gitlab-runsvdir\n    ##3. 再次执行：sudo gitlab-ctl reconfigure\n    \n    ##启动Gitlab服务\n    sudo gitlab-ctl restart\n ##### 2、修改配置   \n\n    vi /etc/gitlab/gitlab.rb\n    \n    ## 修改客户端访问地址，配置域名\n    ## GitLab URL\n    ##! URL on which GitLab will be reachable.\n    ##! For more details on configuring external_url see:\n    ##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\n    external_url 'http://gitlab.capd.net'\n    \n    \n    ## 更改代码仓库的默认目录\n    ### For setting up different data storing directory\n    ###! Docs: https://docs.gitlab.com/omnibus/settings/configuration.html#storing-git-data-in-an-alternative-directory\n    ###! **If you want to use a single non-default directory to store git data use a\n    ###!   path that doesn't contain symlinks.**\n    git_data_dirs({\n      \"default\" => {\n        \"path\" => \"/aifs/gitlab/git-data\"\n       }\n    })\n    \n    ###### \n    #git_data_dir has been deprecated since 8.10 and was removed in 11.0. Use git_data_dirs instead.\n    ######\n    \n    ################################################################################\n    ## gitlab.yml configuration\n    ##! Docs: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/gitlab.yml.md\n    ################################################################################\n    \n    ### Email Settings\n    gitlab_rails['gitlab_email_enabled'] = true\n    gitlab_rails['gitlab_email_from'] = 'cuc-tc-capd@asiainfo.com'\n    gitlab_rails['gitlab_email_display_name'] = 'CUC TC-CAPD ADMIN'\n    gitlab_rails['gitlab_email_reply_to'] = 'cuc-tc-capd@asiainfo.com'\n    gitlab_rails['gitlab_email_subject_suffix'] = ''\n    \n    ### GitLab email server settings\n    ###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html\n    ###! **Use smtp instead of sendmail/postfix.**\n    \n    gitlab_rails['smtp_enable'] = true\n    gitlab_rails['smtp_address'] = \"mail.asiainfo.com\"\n    gitlab_rails['smtp_port'] = 25\n    gitlab_rails['smtp_user_name'] = \"cuc-tc-capd@asiainfo.com\"  ##必须是邮箱名\n    gitlab_rails['smtp_password'] = \"Gl123456\"\n    gitlab_rails['smtp_domain'] = \"asiainfo.com\"\n    gitlab_rails['smtp_authentication'] = \"login\"\n    gitlab_rails['smtp_enable_starttls_auto'] = true\n    gitlab_rails['smtp_tls'] = false\n    \n    vi /var/opt/gitlab/gitlab-rails/etc/gitlab.yml\n    \n    ##域名配置\n    ## Web server settings (note: host is the FQDN, do not include http://)\n    host: gitlab.capd.net\n    \n    ## Email settings\n    # Uncomment and set to false if you need to disable email sending from GitLab (default: true)\n    #email_from: gitlab@gitlab.capd.net\n    email_from: cuc-tc-capd@asiainfo.com\n    \n #### 二：卸载步骤\n     ## 停止gitlab\n     sudo gitlab-ctl stop\n     ## 卸载gitlab\n     sudo rpm -e gitlab-ce\n     ## 查看gitlab进程\n     ps -ef|grep gitlab\n     \n     ## 杀掉第一个守护进程\n     kill -9 6031\n     # 再次查看gitlab进程是否存在\n     ps -ef|grep gitlab\n     \n     ## 删除gitlab文件\n     #  删除所有包含gitlab的文件及目录\n     find / -name gitlab|xargs rm -rf\n\n修改gitlab.rb、gitlab.yml需重启服务\n\n    sudo gitlab-ctl reconfigure\n    sudo gitlab-ctl restart\n    sudo gitlab-ctl status\n","slug":"gitlab-ce","published":1,"updated":"2018-09-06T10:59:24.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlqgwfuj000cestjw6f9mv1m","content":"<p><strong> Gitlab服务器搭建：</strong> <Excerpt in index | 首页摘要><br>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h4 id=\"一：安装步骤\"><a href=\"#一：安装步骤\" class=\"headerlink\" title=\"一：安装步骤\"></a>一：安装步骤</h4><h5 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a>1、安装</h5><pre><code>##安装\nsudo yum install gitlab-ce\n\n#配置itLab\nsudo gitlab-ctl reconfigure\n##gitlab-ctl reconfigure\n##出现：ruby_block[supervise_redis_sleep] action run，会一直卡无法往下进行\n##解决方案：\n##1. 按住CTRL+C强制结束\n##2. 运行：sudo systemctl restart gitlab-runsvdir\n##3. 再次执行：sudo gitlab-ctl reconfigure\n\n##启动Gitlab服务\nsudo gitlab-ctl restart\n</code></pre><h5 id=\"2、修改配置\"><a href=\"#2、修改配置\" class=\"headerlink\" title=\"2、修改配置\"></a>2、修改配置</h5><pre><code>vi /etc/gitlab/gitlab.rb\n\n## 修改客户端访问地址，配置域名\n## GitLab URL\n##! URL on which GitLab will be reachable.\n##! For more details on configuring external_url see:\n##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\nexternal_url &apos;http://gitlab.capd.net&apos;\n\n\n## 更改代码仓库的默认目录\n### For setting up different data storing directory\n###! Docs: https://docs.gitlab.com/omnibus/settings/configuration.html#storing-git-data-in-an-alternative-directory\n###! **If you want to use a single non-default directory to store git data use a\n###!   path that doesn&apos;t contain symlinks.**\ngit_data_dirs({\n  &quot;default&quot; =&gt; {\n    &quot;path&quot; =&gt; &quot;/aifs/gitlab/git-data&quot;\n   }\n})\n\n###### \n#git_data_dir has been deprecated since 8.10 and was removed in 11.0. Use git_data_dirs instead.\n######\n\n################################################################################\n## gitlab.yml configuration\n##! Docs: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/gitlab.yml.md\n################################################################################\n\n### Email Settings\ngitlab_rails[&apos;gitlab_email_enabled&apos;] = true\ngitlab_rails[&apos;gitlab_email_from&apos;] = &apos;cuc-tc-capd@asiainfo.com&apos;\ngitlab_rails[&apos;gitlab_email_display_name&apos;] = &apos;CUC TC-CAPD ADMIN&apos;\ngitlab_rails[&apos;gitlab_email_reply_to&apos;] = &apos;cuc-tc-capd@asiainfo.com&apos;\ngitlab_rails[&apos;gitlab_email_subject_suffix&apos;] = &apos;&apos;\n\n### GitLab email server settings\n###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html\n###! **Use smtp instead of sendmail/postfix.**\n\ngitlab_rails[&apos;smtp_enable&apos;] = true\ngitlab_rails[&apos;smtp_address&apos;] = &quot;mail.asiainfo.com&quot;\ngitlab_rails[&apos;smtp_port&apos;] = 25\ngitlab_rails[&apos;smtp_user_name&apos;] = &quot;cuc-tc-capd@asiainfo.com&quot;  ##必须是邮箱名\ngitlab_rails[&apos;smtp_password&apos;] = &quot;Gl123456&quot;\ngitlab_rails[&apos;smtp_domain&apos;] = &quot;asiainfo.com&quot;\ngitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;\ngitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true\ngitlab_rails[&apos;smtp_tls&apos;] = false\n\nvi /var/opt/gitlab/gitlab-rails/etc/gitlab.yml\n\n##域名配置\n## Web server settings (note: host is the FQDN, do not include http://)\nhost: gitlab.capd.net\n\n## Email settings\n# Uncomment and set to false if you need to disable email sending from GitLab (default: true)\n#email_from: gitlab@gitlab.capd.net\nemail_from: cuc-tc-capd@asiainfo.com\n</code></pre><h4 id=\"二：卸载步骤\"><a href=\"#二：卸载步骤\" class=\"headerlink\" title=\"二：卸载步骤\"></a>二：卸载步骤</h4><pre><code>## 停止gitlab\nsudo gitlab-ctl stop\n## 卸载gitlab\nsudo rpm -e gitlab-ce\n## 查看gitlab进程\nps -ef|grep gitlab\n\n## 杀掉第一个守护进程\nkill -9 6031\n# 再次查看gitlab进程是否存在\nps -ef|grep gitlab\n\n## 删除gitlab文件\n#  删除所有包含gitlab的文件及目录\nfind / -name gitlab|xargs rm -rf\n</code></pre><p>修改gitlab.rb、gitlab.yml需重启服务</p>\n<pre><code>sudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\nsudo gitlab-ctl status\n</code></pre>","site":{"data":{}},"excerpt":"<p><strong> Gitlab服务器搭建：</strong> <Excerpt in index | 首页摘要><br>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h4 id=\"一：安装步骤\"><a href=\"#一：安装步骤\" class=\"headerlink\" title=\"一：安装步骤\"></a>一：安装步骤</h4><h5 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a>1、安装</h5><pre><code>##安装\nsudo yum install gitlab-ce\n\n#配置itLab\nsudo gitlab-ctl reconfigure\n##gitlab-ctl reconfigure\n##出现：ruby_block[supervise_redis_sleep] action run，会一直卡无法往下进行\n##解决方案：\n##1. 按住CTRL+C强制结束\n##2. 运行：sudo systemctl restart gitlab-runsvdir\n##3. 再次执行：sudo gitlab-ctl reconfigure\n\n##启动Gitlab服务\nsudo gitlab-ctl restart\n</code></pre><h5 id=\"2、修改配置\"><a href=\"#2、修改配置\" class=\"headerlink\" title=\"2、修改配置\"></a>2、修改配置</h5><pre><code>vi /etc/gitlab/gitlab.rb\n\n## 修改客户端访问地址，配置域名\n## GitLab URL\n##! URL on which GitLab will be reachable.\n##! For more details on configuring external_url see:\n##! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab\nexternal_url &apos;http://gitlab.capd.net&apos;\n\n\n## 更改代码仓库的默认目录\n### For setting up different data storing directory\n###! Docs: https://docs.gitlab.com/omnibus/settings/configuration.html#storing-git-data-in-an-alternative-directory\n###! **If you want to use a single non-default directory to store git data use a\n###!   path that doesn&apos;t contain symlinks.**\ngit_data_dirs({\n  &quot;default&quot; =&gt; {\n    &quot;path&quot; =&gt; &quot;/aifs/gitlab/git-data&quot;\n   }\n})\n\n###### \n#git_data_dir has been deprecated since 8.10 and was removed in 11.0. Use git_data_dirs instead.\n######\n\n################################################################################\n## gitlab.yml configuration\n##! Docs: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/gitlab.yml.md\n################################################################################\n\n### Email Settings\ngitlab_rails[&apos;gitlab_email_enabled&apos;] = true\ngitlab_rails[&apos;gitlab_email_from&apos;] = &apos;cuc-tc-capd@asiainfo.com&apos;\ngitlab_rails[&apos;gitlab_email_display_name&apos;] = &apos;CUC TC-CAPD ADMIN&apos;\ngitlab_rails[&apos;gitlab_email_reply_to&apos;] = &apos;cuc-tc-capd@asiainfo.com&apos;\ngitlab_rails[&apos;gitlab_email_subject_suffix&apos;] = &apos;&apos;\n\n### GitLab email server settings\n###! Docs: https://docs.gitlab.com/omnibus/settings/smtp.html\n###! **Use smtp instead of sendmail/postfix.**\n\ngitlab_rails[&apos;smtp_enable&apos;] = true\ngitlab_rails[&apos;smtp_address&apos;] = &quot;mail.asiainfo.com&quot;\ngitlab_rails[&apos;smtp_port&apos;] = 25\ngitlab_rails[&apos;smtp_user_name&apos;] = &quot;cuc-tc-capd@asiainfo.com&quot;  ##必须是邮箱名\ngitlab_rails[&apos;smtp_password&apos;] = &quot;Gl123456&quot;\ngitlab_rails[&apos;smtp_domain&apos;] = &quot;asiainfo.com&quot;\ngitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;\ngitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true\ngitlab_rails[&apos;smtp_tls&apos;] = false\n\nvi /var/opt/gitlab/gitlab-rails/etc/gitlab.yml\n\n##域名配置\n## Web server settings (note: host is the FQDN, do not include http://)\nhost: gitlab.capd.net\n\n## Email settings\n# Uncomment and set to false if you need to disable email sending from GitLab (default: true)\n#email_from: gitlab@gitlab.capd.net\nemail_from: cuc-tc-capd@asiainfo.com\n</code></pre><h4 id=\"二：卸载步骤\"><a href=\"#二：卸载步骤\" class=\"headerlink\" title=\"二：卸载步骤\"></a>二：卸载步骤</h4><pre><code>## 停止gitlab\nsudo gitlab-ctl stop\n## 卸载gitlab\nsudo rpm -e gitlab-ce\n## 查看gitlab进程\nps -ef|grep gitlab\n\n## 杀掉第一个守护进程\nkill -9 6031\n# 再次查看gitlab进程是否存在\nps -ef|grep gitlab\n\n## 删除gitlab文件\n#  删除所有包含gitlab的文件及目录\nfind / -name gitlab|xargs rm -rf\n</code></pre><p>修改gitlab.rb、gitlab.yml需重启服务</p>\n<pre><code>sudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\nsudo gitlab-ctl status\n</code></pre>"},{"title":"Hexo + Gitlab光速搭建博客并实现Git服务器自动部署","cover_picture":"/images/hexo.jpg","date":"2018-08-29T12:20:00.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n#### 第一步：安装node.js\n##### 1、Windows下安装node\n   Windows下安装直接下载软件包，执行就好。\n   安装完成后，在Windows环境下，请打开命令提示符，然后输入node -v，如果安装正常，你应该看到v7.6.0这样的输出：\n   \n![upload successful](\\images\\hexo\\pasted-1.png)\n\n其实npm已经在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入npm -v，应该看到类似的输出：\n\n![upload successful](\\images\\hexo\\pasted-2.png)\n\n##### 2、Linux下安装node\n（1）下载nodejs程序包\n网址：https://nodejs.org/en/download/\n\n![upload successful](\\images\\hexo\\pasted-3.png)\n\n （2）把程序包上传到服务器\n\n![upload successful](\\images\\hexo\\pasted-4.png)\n\n（3）加压压缩包\n\ttar -xvf node-v10.8.0-linux-x64.tar.xz\n\n（4）重命名文件夹\n\tmv node-v10.8.0-linux-x64 nodejs\n    \n （5）建立软链接，配置全局环境变量\n\n\tln -s /usr/local/node/nodejs/bin/npm /usr/local/bin/\n\n\tln -s /usr/local/node/nodejs/bin/node /usr/local/bin/\n\n （6）检查是否配置成功\n\tnode -v\n\n\tnpm -v\n\n2.把程序包上传到服务器\n\n#### 第二步：安装hexo并初始化项目\n\n    npm install -g hexo-cli\n\n  安装成功后切换到你想要创建博客的目录，然后执行\n\n    hexo init <folder>\n     cd <folder>\n     npm install\n  其中folder为博客目录名称，换成你想要的名称即可\n  至此，第一步已经完成。得到如下源文件：\n  \n![upload successful](\\images\\hexo\\pasted-0.png)\n\n#### 第三步：安装git\n\n#### 第四步：上传项目到gitlab上\n\n#### 第五步：Gitlab-CI实现\n ##### 1、名词解释\n  （1）Gitlab-CI\n Gitlab-CI是GitLab Continuous Integration（Gitlab持续集成）的简称。\n \n 从Gitlab的8.0版本开始，gitlab就全面集成了Gitlab-CI,并且对所有项目默认开启。\n \n 只要在项目仓库的根目录添加.gitlab-ci.yml文件，并且配置了Runner（运行器），那么每一次合并请求（MR）或者push都会触发CI pipeline。\n \n  （2）Gitlab-runner\n   \n   Gitlab-runner是.gitlab-ci.yml脚本的运行器，Gitlab-runner是基于Gitlab-CI的API进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和Gitlab安装在同一台机器上，但是考虑到GitLab Runner的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。\n\nGitlab Runner分为两种，Shared runners和Specific runners。\nSpecific runners只能被指定的项目使用，Shared runners则可以运行所有开启 Allow shared runners选项的项目。\n\n（3）Pipelines\nPipelines是定义于.gitlab-ci.yml中的不同阶段的不同任务。\n我把Pipelines理解为流水线，流水线包含有多个阶段（stages），每个阶段包含有一个或多个工序（jobs），比如先购料、组装、测试、包装再上线销售，每一次push或者MR都要经过流水线之后才可以合格出厂。而.gitlab-ci.yml正是定义了这条流水线有哪些阶段，每个阶段要做什么事。\n\n（4）Badges\n徽章，当Pipelines执行完成，会生成徽章，你可以将这些徽章加入到你的README.md文件或者你的网站。\n\n ##### 2、安装配置\n 这里跳过Gitlab的安装\n \n ##### 安装gitlab-ci-multi-runner\n （1）添加Gitlab的官方源\n \n     #ForCentOS\n     curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\n （2）安装\n    \n    sudo yum install gitlab-ci-multi-runner\n \n （3）注册Runner\n \n Runner需要注册到Gitlab才可以被项目所使用，一个gitlab-ci-multi-runner服务可以注册多个Runner\n     ## http://gitlab.capd.net/\n     ## jgbar32kmvaafJvoNH2o\n     \n     sudo gitlab-ci-multi-runner register\n     \n     Running in system-mode.                            \n                                                        \n     Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\n     http://gitlab.capd.net/\n     Please enter the gitlab-ci token for this runner:\n     jgbar32kmvaafJvoNH2o\n     Please enter the gitlab-ci description for this runner:\n     [host-10-1-241-33]: mytest\n     Please enter the gitlab-ci tags for this runner (comma separated):\n     test\n     Whether to run untagged builds [true/false]:\n     [false]: true\n     Whether to lock Runner to current project [true/false]:\n     [false]: \n     Registering runner... succeeded                     runner=jgbar32k\n     Please enter the executor: docker, docker-ssh, parallels, ssh, docker-ssh+machine, shell, virtualbox, docker+machine, kubernetes:\n     shell\n     Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! \n  （4）更新Runner\n  如果需要更新Runner，只需要执行以下脚本： \n    \n    #For CentOS\n    sudo yum update\n    sudo yum install gitlab-ci-multi-runner\n \n （5）Runner高级配置\n  通过gitlab-ci-multi-runner register注册的Runner配置会存储在/etc/gitlab-runner/config.toml中，如果需要修改可直接编辑该文件\n\n    concurrent = 1\n    check_interval = 0\n    [[runners]]\n      name = \"matesr\"\n      url = \"http://gitlab.capd.net/\"\n      token = \"977bec174e00a0960f6b3133d7f3c3\"\n      executor = \"shell\"\n      [runners.cache]\n    \n    [[runners]]\n      name = \"hexO\"\n      url = \"http://gitlab.capd.net/\"\n      token = \"75e82f2298901dfb7aec37a47bacae\"\n      executor = \"shell\"\n      [runners.cache]\n    \n    [[runners]]\n      name = \"asiainfo-hexo\"\n      url = \"http://gitlab.capd.net/\"\n      token = \"6765a30042ecdc79e41c2b085f2999\"\n      executor = \"shell\"\n      [runners.cache]\n    \n    [[runners]]\n      name = \"hexo-jiacy\"\n      url = \"http://10.1.241.33/\"\n      token = \"d9034efa87b159c7c98794cfad9f8f\"\n      executor = \"shell\"\n      [runners.cache]\n    ~     \n    到这里我们的Runner就安装配置好了，接下来是对项目根目录中.gitlab-ci.yml进行配置。               \n ##### （2）配置构建任务\n\n   （1）在项目根目录添加.gitlab-ci.yml文件\n   \n    image: node:8.11.2\n    \n    pages:\n      cache:\n        paths:\n        - node_modules/\n    \n      script:\n      - npm install hexo-cli -g\n      - npm install\n      - hexo deploy\n      artifacts:\n        paths:\n        - public\n      only:\n      - master\n      \n  （2）在项目根目录添加.gitlab-ci.yml文件\n  \n![upload successful](\\images\\hexo\\pasted-5.png)\n\n这样整个CI流程就配置完了，项目是hexo，就会生产我们的页面，在Pages中查看：\n\n![upload successful](\\images\\hexo\\pasted-6.png)\n\n之后每次push到git仓库代码的时候都会执行项目对应的任务：\n\n![upload successful](\\images\\hexo\\pasted-7.png)","source":"_posts/hexo-gitlab.md","raw":"title: Hexo + Gitlab光速搭建博客并实现Git服务器自动部署\ncover_picture: /images/hexo.jpg\ntags: []\ncategories:\n  - 研发工具\ndate: 2018-08-29 20:20:00\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n#### 第一步：安装node.js\n##### 1、Windows下安装node\n   Windows下安装直接下载软件包，执行就好。\n   安装完成后，在Windows环境下，请打开命令提示符，然后输入node -v，如果安装正常，你应该看到v7.6.0这样的输出：\n   \n![upload successful](\\images\\hexo\\pasted-1.png)\n\n其实npm已经在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入npm -v，应该看到类似的输出：\n\n![upload successful](\\images\\hexo\\pasted-2.png)\n\n##### 2、Linux下安装node\n（1）下载nodejs程序包\n网址：https://nodejs.org/en/download/\n\n![upload successful](\\images\\hexo\\pasted-3.png)\n\n （2）把程序包上传到服务器\n\n![upload successful](\\images\\hexo\\pasted-4.png)\n\n（3）加压压缩包\n\ttar -xvf node-v10.8.0-linux-x64.tar.xz\n\n（4）重命名文件夹\n\tmv node-v10.8.0-linux-x64 nodejs\n    \n （5）建立软链接，配置全局环境变量\n\n\tln -s /usr/local/node/nodejs/bin/npm /usr/local/bin/\n\n\tln -s /usr/local/node/nodejs/bin/node /usr/local/bin/\n\n （6）检查是否配置成功\n\tnode -v\n\n\tnpm -v\n\n2.把程序包上传到服务器\n\n#### 第二步：安装hexo并初始化项目\n\n    npm install -g hexo-cli\n\n  安装成功后切换到你想要创建博客的目录，然后执行\n\n    hexo init <folder>\n     cd <folder>\n     npm install\n  其中folder为博客目录名称，换成你想要的名称即可\n  至此，第一步已经完成。得到如下源文件：\n  \n![upload successful](\\images\\hexo\\pasted-0.png)\n\n#### 第三步：安装git\n\n#### 第四步：上传项目到gitlab上\n\n#### 第五步：Gitlab-CI实现\n ##### 1、名词解释\n  （1）Gitlab-CI\n Gitlab-CI是GitLab Continuous Integration（Gitlab持续集成）的简称。\n \n 从Gitlab的8.0版本开始，gitlab就全面集成了Gitlab-CI,并且对所有项目默认开启。\n \n 只要在项目仓库的根目录添加.gitlab-ci.yml文件，并且配置了Runner（运行器），那么每一次合并请求（MR）或者push都会触发CI pipeline。\n \n  （2）Gitlab-runner\n   \n   Gitlab-runner是.gitlab-ci.yml脚本的运行器，Gitlab-runner是基于Gitlab-CI的API进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和Gitlab安装在同一台机器上，但是考虑到GitLab Runner的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。\n\nGitlab Runner分为两种，Shared runners和Specific runners。\nSpecific runners只能被指定的项目使用，Shared runners则可以运行所有开启 Allow shared runners选项的项目。\n\n（3）Pipelines\nPipelines是定义于.gitlab-ci.yml中的不同阶段的不同任务。\n我把Pipelines理解为流水线，流水线包含有多个阶段（stages），每个阶段包含有一个或多个工序（jobs），比如先购料、组装、测试、包装再上线销售，每一次push或者MR都要经过流水线之后才可以合格出厂。而.gitlab-ci.yml正是定义了这条流水线有哪些阶段，每个阶段要做什么事。\n\n（4）Badges\n徽章，当Pipelines执行完成，会生成徽章，你可以将这些徽章加入到你的README.md文件或者你的网站。\n\n ##### 2、安装配置\n 这里跳过Gitlab的安装\n \n ##### 安装gitlab-ci-multi-runner\n （1）添加Gitlab的官方源\n \n     #ForCentOS\n     curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\n （2）安装\n    \n    sudo yum install gitlab-ci-multi-runner\n \n （3）注册Runner\n \n Runner需要注册到Gitlab才可以被项目所使用，一个gitlab-ci-multi-runner服务可以注册多个Runner\n     ## http://gitlab.capd.net/\n     ## jgbar32kmvaafJvoNH2o\n     \n     sudo gitlab-ci-multi-runner register\n     \n     Running in system-mode.                            \n                                                        \n     Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\n     http://gitlab.capd.net/\n     Please enter the gitlab-ci token for this runner:\n     jgbar32kmvaafJvoNH2o\n     Please enter the gitlab-ci description for this runner:\n     [host-10-1-241-33]: mytest\n     Please enter the gitlab-ci tags for this runner (comma separated):\n     test\n     Whether to run untagged builds [true/false]:\n     [false]: true\n     Whether to lock Runner to current project [true/false]:\n     [false]: \n     Registering runner... succeeded                     runner=jgbar32k\n     Please enter the executor: docker, docker-ssh, parallels, ssh, docker-ssh+machine, shell, virtualbox, docker+machine, kubernetes:\n     shell\n     Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! \n  （4）更新Runner\n  如果需要更新Runner，只需要执行以下脚本： \n    \n    #For CentOS\n    sudo yum update\n    sudo yum install gitlab-ci-multi-runner\n \n （5）Runner高级配置\n  通过gitlab-ci-multi-runner register注册的Runner配置会存储在/etc/gitlab-runner/config.toml中，如果需要修改可直接编辑该文件\n\n    concurrent = 1\n    check_interval = 0\n    [[runners]]\n      name = \"matesr\"\n      url = \"http://gitlab.capd.net/\"\n      token = \"977bec174e00a0960f6b3133d7f3c3\"\n      executor = \"shell\"\n      [runners.cache]\n    \n    [[runners]]\n      name = \"hexO\"\n      url = \"http://gitlab.capd.net/\"\n      token = \"75e82f2298901dfb7aec37a47bacae\"\n      executor = \"shell\"\n      [runners.cache]\n    \n    [[runners]]\n      name = \"asiainfo-hexo\"\n      url = \"http://gitlab.capd.net/\"\n      token = \"6765a30042ecdc79e41c2b085f2999\"\n      executor = \"shell\"\n      [runners.cache]\n    \n    [[runners]]\n      name = \"hexo-jiacy\"\n      url = \"http://10.1.241.33/\"\n      token = \"d9034efa87b159c7c98794cfad9f8f\"\n      executor = \"shell\"\n      [runners.cache]\n    ~     \n    到这里我们的Runner就安装配置好了，接下来是对项目根目录中.gitlab-ci.yml进行配置。               \n ##### （2）配置构建任务\n\n   （1）在项目根目录添加.gitlab-ci.yml文件\n   \n    image: node:8.11.2\n    \n    pages:\n      cache:\n        paths:\n        - node_modules/\n    \n      script:\n      - npm install hexo-cli -g\n      - npm install\n      - hexo deploy\n      artifacts:\n        paths:\n        - public\n      only:\n      - master\n      \n  （2）在项目根目录添加.gitlab-ci.yml文件\n  \n![upload successful](\\images\\hexo\\pasted-5.png)\n\n这样整个CI流程就配置完了，项目是hexo，就会生产我们的页面，在Pages中查看：\n\n![upload successful](\\images\\hexo\\pasted-6.png)\n\n之后每次push到git仓库代码的时候都会执行项目对应的任务：\n\n![upload successful](\\images\\hexo\\pasted-7.png)","slug":"hexo-gitlab","published":1,"updated":"2018-09-06T10:50:46.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlqgwfur000destjq6xky1rd","content":"<p><strong> Hexo + Gitlab光速搭建博客并实现Git服务器自动部署：</strong> <Excerpt in index | 首页摘要><br>分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h4 id=\"第一步：安装node-js\"><a href=\"#第一步：安装node-js\" class=\"headerlink\" title=\"第一步：安装node.js\"></a>第一步：安装node.js</h4><h5 id=\"1、Windows下安装node\"><a href=\"#1、Windows下安装node\" class=\"headerlink\" title=\"1、Windows下安装node\"></a>1、Windows下安装node</h5><p>   Windows下安装直接下载软件包，执行就好。<br>   安装完成后，在Windows环境下，请打开命令提示符，然后输入node -v，如果安装正常，你应该看到v7.6.0这样的输出：</p>\n<p><img src=\"\\images\\hexo\\pasted-1.png\" alt=\"upload successful\"></p>\n<p>其实npm已经在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入npm -v，应该看到类似的输出：</p>\n<p><img src=\"\\images\\hexo\\pasted-2.png\" alt=\"upload successful\"></p>\n<h5 id=\"2、Linux下安装node\"><a href=\"#2、Linux下安装node\" class=\"headerlink\" title=\"2、Linux下安装node\"></a>2、Linux下安装node</h5><p>（1）下载nodejs程序包<br>网址：<a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a></p>\n<p><img src=\"\\images\\hexo\\pasted-3.png\" alt=\"upload successful\"></p>\n<p> （2）把程序包上传到服务器</p>\n<p><img src=\"\\images\\hexo\\pasted-4.png\" alt=\"upload successful\"></p>\n<p>（3）加压压缩包<br>    tar -xvf node-v10.8.0-linux-x64.tar.xz</p>\n<p>（4）重命名文件夹<br>    mv node-v10.8.0-linux-x64 nodejs</p>\n<p> （5）建立软链接，配置全局环境变量</p>\n<pre><code>ln -s /usr/local/node/nodejs/bin/npm /usr/local/bin/\n\nln -s /usr/local/node/nodejs/bin/node /usr/local/bin/\n</code></pre><p> （6）检查是否配置成功<br>    node -v</p>\n<pre><code>npm -v\n</code></pre><p>2.把程序包上传到服务器</p>\n<h4 id=\"第二步：安装hexo并初始化项目\"><a href=\"#第二步：安装hexo并初始化项目\" class=\"headerlink\" title=\"第二步：安装hexo并初始化项目\"></a>第二步：安装hexo并初始化项目</h4><pre><code>npm install -g hexo-cli\n</code></pre><p>  安装成功后切换到你想要创建博客的目录，然后执行</p>\n<pre><code>hexo init &lt;folder&gt;\n cd &lt;folder&gt;\n npm install\n</code></pre><p>  其中folder为博客目录名称，换成你想要的名称即可<br>  至此，第一步已经完成。得到如下源文件：</p>\n<p><img src=\"\\images\\hexo\\pasted-0.png\" alt=\"upload successful\"></p>\n<h4 id=\"第三步：安装git\"><a href=\"#第三步：安装git\" class=\"headerlink\" title=\"第三步：安装git\"></a>第三步：安装git</h4><h4 id=\"第四步：上传项目到gitlab上\"><a href=\"#第四步：上传项目到gitlab上\" class=\"headerlink\" title=\"第四步：上传项目到gitlab上\"></a>第四步：上传项目到gitlab上</h4><h4 id=\"第五步：Gitlab-CI实现\"><a href=\"#第五步：Gitlab-CI实现\" class=\"headerlink\" title=\"第五步：Gitlab-CI实现\"></a>第五步：Gitlab-CI实现</h4><h5 id=\"1、名词解释\"><a href=\"#1、名词解释\" class=\"headerlink\" title=\"1、名词解释\"></a>1、名词解释</h5><p>  （1）Gitlab-CI<br> Gitlab-CI是GitLab Continuous Integration（Gitlab持续集成）的简称。</p>\n<p> 从Gitlab的8.0版本开始，gitlab就全面集成了Gitlab-CI,并且对所有项目默认开启。</p>\n<p> 只要在项目仓库的根目录添加.gitlab-ci.yml文件，并且配置了Runner（运行器），那么每一次合并请求（MR）或者push都会触发CI pipeline。</p>\n<p>  （2）Gitlab-runner</p>\n<p>   Gitlab-runner是.gitlab-ci.yml脚本的运行器，Gitlab-runner是基于Gitlab-CI的API进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和Gitlab安装在同一台机器上，但是考虑到GitLab Runner的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。</p>\n<p>Gitlab Runner分为两种，Shared runners和Specific runners。<br>Specific runners只能被指定的项目使用，Shared runners则可以运行所有开启 Allow shared runners选项的项目。</p>\n<p>（3）Pipelines<br>Pipelines是定义于.gitlab-ci.yml中的不同阶段的不同任务。<br>我把Pipelines理解为流水线，流水线包含有多个阶段（stages），每个阶段包含有一个或多个工序（jobs），比如先购料、组装、测试、包装再上线销售，每一次push或者MR都要经过流水线之后才可以合格出厂。而.gitlab-ci.yml正是定义了这条流水线有哪些阶段，每个阶段要做什么事。</p>\n<p>（4）Badges<br>徽章，当Pipelines执行完成，会生成徽章，你可以将这些徽章加入到你的README.md文件或者你的网站。</p>\n<h5 id=\"2、安装配置\"><a href=\"#2、安装配置\" class=\"headerlink\" title=\"2、安装配置\"></a>2、安装配置</h5><p> 这里跳过Gitlab的安装</p>\n<h5 id=\"安装gitlab-ci-multi-runner\"><a href=\"#安装gitlab-ci-multi-runner\" class=\"headerlink\" title=\"安装gitlab-ci-multi-runner\"></a>安装gitlab-ci-multi-runner</h5><p> （1）添加Gitlab的官方源</p>\n<pre><code>#ForCentOS\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\n</code></pre><p> （2）安装</p>\n<pre><code>sudo yum install gitlab-ci-multi-runner\n</code></pre><p> （3）注册Runner</p>\n<p> Runner需要注册到Gitlab才可以被项目所使用，一个gitlab-ci-multi-runner服务可以注册多个Runner</p>\n<pre><code>## http://gitlab.capd.net/\n## jgbar32kmvaafJvoNH2o\n\nsudo gitlab-ci-multi-runner register\n\nRunning in system-mode.                            \n\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.capd.net/\nPlease enter the gitlab-ci token for this runner:\njgbar32kmvaafJvoNH2o\nPlease enter the gitlab-ci description for this runner:\n[host-10-1-241-33]: mytest\nPlease enter the gitlab-ci tags for this runner (comma separated):\ntest\nWhether to run untagged builds [true/false]:\n[false]: true\nWhether to lock Runner to current project [true/false]:\n[false]: \nRegistering runner... succeeded                     runner=jgbar32k\nPlease enter the executor: docker, docker-ssh, parallels, ssh, docker-ssh+machine, shell, virtualbox, docker+machine, kubernetes:\nshell\nRunner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded! \n</code></pre><p>  （4）更新Runner<br>  如果需要更新Runner，只需要执行以下脚本： </p>\n<pre><code>#For CentOS\nsudo yum update\nsudo yum install gitlab-ci-multi-runner\n</code></pre><p> （5）Runner高级配置<br>  通过gitlab-ci-multi-runner register注册的Runner配置会存储在/etc/gitlab-runner/config.toml中，如果需要修改可直接编辑该文件</p>\n<pre><code>concurrent = 1\ncheck_interval = 0\n[[runners]]\n  name = &quot;matesr&quot;\n  url = &quot;http://gitlab.capd.net/&quot;\n  token = &quot;977bec174e00a0960f6b3133d7f3c3&quot;\n  executor = &quot;shell&quot;\n  [runners.cache]\n\n[[runners]]\n  name = &quot;hexO&quot;\n  url = &quot;http://gitlab.capd.net/&quot;\n  token = &quot;75e82f2298901dfb7aec37a47bacae&quot;\n  executor = &quot;shell&quot;\n  [runners.cache]\n\n[[runners]]\n  name = &quot;asiainfo-hexo&quot;\n  url = &quot;http://gitlab.capd.net/&quot;\n  token = &quot;6765a30042ecdc79e41c2b085f2999&quot;\n  executor = &quot;shell&quot;\n  [runners.cache]\n\n[[runners]]\n  name = &quot;hexo-jiacy&quot;\n  url = &quot;http://10.1.241.33/&quot;\n  token = &quot;d9034efa87b159c7c98794cfad9f8f&quot;\n  executor = &quot;shell&quot;\n  [runners.cache]\n~     \n到这里我们的Runner就安装配置好了，接下来是对项目根目录中.gitlab-ci.yml进行配置。               \n</code></pre><h5 id=\"（2）配置构建任务\"><a href=\"#（2）配置构建任务\" class=\"headerlink\" title=\"（2）配置构建任务\"></a>（2）配置构建任务</h5><p>   （1）在项目根目录添加.gitlab-ci.yml文件</p>\n<pre><code>image: node:8.11.2\n\npages:\n  cache:\n    paths:\n    - node_modules/\n\n  script:\n  - npm install hexo-cli -g\n  - npm install\n  - hexo deploy\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\n</code></pre><p>  （2）在项目根目录添加.gitlab-ci.yml文件</p>\n<p><img src=\"\\images\\hexo\\pasted-5.png\" alt=\"upload successful\"></p>\n<p>这样整个CI流程就配置完了，项目是hexo，就会生产我们的页面，在Pages中查看：</p>\n<p><img src=\"\\images\\hexo\\pasted-6.png\" alt=\"upload successful\"></p>\n<p>之后每次push到git仓库代码的时候都会执行项目对应的任务：</p>\n<p><img src=\"\\images\\hexo\\pasted-7.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"<p><strong> Hexo + Gitlab光速搭建博客并实现Git服务器自动部署：</strong> <Excerpt in index | 首页摘要><br>分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h4 id=\"第一步：安装node-js\"><a href=\"#第一步：安装node-js\" class=\"headerlink\" title=\"第一步：安装node.js\"></a>第一步：安装node.js</h4><h5 id=\"1、Windows下安装node\"><a href=\"#1、Windows下安装node\" class=\"headerlink\" title=\"1、Windows下安装node\"></a>1、Windows下安装node</h5><p>   Windows下安装直接下载软件包，执行就好。<br>   安装完成后，在Windows环境下，请打开命令提示符，然后输入node -v，如果安装正常，你应该看到v7.6.0这样的输出：</p>\n<p><img src=\"\\images\\hexo\\pasted-1.png\" alt=\"upload successful\"></p>\n<p>其实npm已经在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入npm -v，应该看到类似的输出：</p>\n<p><img src=\"\\images\\hexo\\pasted-2.png\" alt=\"upload successful\"></p>\n<h5 id=\"2、Linux下安装node\"><a href=\"#2、Linux下安装node\" class=\"headerlink\" title=\"2、Linux下安装node\"></a>2、Linux下安装node</h5><p>（1）下载nodejs程序包<br>网址：<a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a></p>\n<p><img src=\"\\images\\hexo\\pasted-3.png\" alt=\"upload successful\"></p>\n<p> （2）把程序包上传到服务器</p>\n<p><img src=\"\\images\\hexo\\pasted-4.png\" alt=\"upload successful\"></p>\n<p>（3）加压压缩包<br>    tar -xvf node-v10.8.0-linux-x64.tar.xz</p>\n<p>（4）重命名文件夹<br>    mv node-v10.8.0-linux-x64 nodejs</p>\n<p> （5）建立软链接，配置全局环境变量</p>\n<pre><code>ln -s /usr/local/node/nodejs/bin/npm /usr/local/bin/\n\nln -s /usr/local/node/nodejs/bin/node /usr/local/bin/\n</code></pre><p> （6）检查是否配置成功<br>    node -v</p>\n<pre><code>npm -v\n</code></pre><p>2.把程序包上传到服务器</p>\n<h4 id=\"第二步：安装hexo并初始化项目\"><a href=\"#第二步：安装hexo并初始化项目\" class=\"headerlink\" title=\"第二步：安装hexo并初始化项目\"></a>第二步：安装hexo并初始化项目</h4><pre><code>npm install -g hexo-cli\n</code></pre><p>  安装成功后切换到你想要创建博客的目录，然后执行</p>\n<pre><code>hexo init &lt;folder&gt;\n cd &lt;folder&gt;\n npm install\n</code></pre><p>  其中folder为博客目录名称，换成你想要的名称即可<br>  至此，第一步已经完成。得到如下源文件：</p>\n<p><img src=\"\\images\\hexo\\pasted-0.png\" alt=\"upload successful\"></p>\n<h4 id=\"第三步：安装git\"><a href=\"#第三步：安装git\" class=\"headerlink\" title=\"第三步：安装git\"></a>第三步：安装git</h4><h4 id=\"第四步：上传项目到gitlab上\"><a href=\"#第四步：上传项目到gitlab上\" class=\"headerlink\" title=\"第四步：上传项目到gitlab上\"></a>第四步：上传项目到gitlab上</h4><h4 id=\"第五步：Gitlab-CI实现\"><a href=\"#第五步：Gitlab-CI实现\" class=\"headerlink\" title=\"第五步：Gitlab-CI实现\"></a>第五步：Gitlab-CI实现</h4><h5 id=\"1、名词解释\"><a href=\"#1、名词解释\" class=\"headerlink\" title=\"1、名词解释\"></a>1、名词解释</h5><p>  （1）Gitlab-CI<br> Gitlab-CI是GitLab Continuous Integration（Gitlab持续集成）的简称。</p>\n<p> 从Gitlab的8.0版本开始，gitlab就全面集成了Gitlab-CI,并且对所有项目默认开启。</p>\n<p> 只要在项目仓库的根目录添加.gitlab-ci.yml文件，并且配置了Runner（运行器），那么每一次合并请求（MR）或者push都会触发CI pipeline。</p>\n<p>  （2）Gitlab-runner</p>\n<p>   Gitlab-runner是.gitlab-ci.yml脚本的运行器，Gitlab-runner是基于Gitlab-CI的API进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和Gitlab安装在同一台机器上，但是考虑到GitLab Runner的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。</p>\n<p>Gitlab Runner分为两种，Shared runners和Specific runners。<br>Specific runners只能被指定的项目使用，Shared runners则可以运行所有开启 Allow shared runners选项的项目。</p>\n<p>（3）Pipelines<br>Pipelines是定义于.gitlab-ci.yml中的不同阶段的不同任务。<br>我把Pipelines理解为流水线，流水线包含有多个阶段（stages），每个阶段包含有一个或多个工序（jobs），比如先购料、组装、测试、包装再上线销售，每一次push或者MR都要经过流水线之后才可以合格出厂。而.gitlab-ci.yml正是定义了这条流水线有哪些阶段，每个阶段要做什么事。</p>\n<p>（4）Badges<br>徽章，当Pipelines执行完成，会生成徽章，你可以将这些徽章加入到你的README.md文件或者你的网站。</p>\n<h5 id=\"2、安装配置\"><a href=\"#2、安装配置\" class=\"headerlink\" title=\"2、安装配置\"></a>2、安装配置</h5><p> 这里跳过Gitlab的安装</p>\n<h5 id=\"安装gitlab-ci-multi-runner\"><a href=\"#安装gitlab-ci-multi-runner\" class=\"headerlink\" title=\"安装gitlab-ci-multi-runner\"></a>安装gitlab-ci-multi-runner</h5><p> （1）添加Gitlab的官方源</p>\n<pre><code>#ForCentOS\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\n</code></pre><p> （2）安装</p>\n<pre><code>sudo yum install gitlab-ci-multi-runner\n</code></pre><p> （3）注册Runner</p>\n<p> Runner需要注册到Gitlab才可以被项目所使用，一个gitlab-ci-multi-runner服务可以注册多个Runner</p>\n<pre><code>## http://gitlab.capd.net/\n## jgbar32kmvaafJvoNH2o\n\nsudo gitlab-ci-multi-runner register\n\nRunning in system-mode.                            \n\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.capd.net/\nPlease enter the gitlab-ci token for this runner:\njgbar32kmvaafJvoNH2o\nPlease enter the gitlab-ci description for this runner:\n[host-10-1-241-33]: mytest\nPlease enter the gitlab-ci tags for this runner (comma separated):\ntest\nWhether to run untagged builds [true/false]:\n[false]: true\nWhether to lock Runner to current project [true/false]:\n[false]: \nRegistering runner... succeeded                     runner=jgbar32k\nPlease enter the executor: docker, docker-ssh, parallels, ssh, docker-ssh+machine, shell, virtualbox, docker+machine, kubernetes:\nshell\nRunner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded! \n</code></pre><p>  （4）更新Runner<br>  如果需要更新Runner，只需要执行以下脚本： </p>\n<pre><code>#For CentOS\nsudo yum update\nsudo yum install gitlab-ci-multi-runner\n</code></pre><p> （5）Runner高级配置<br>  通过gitlab-ci-multi-runner register注册的Runner配置会存储在/etc/gitlab-runner/config.toml中，如果需要修改可直接编辑该文件</p>\n<pre><code>concurrent = 1\ncheck_interval = 0\n[[runners]]\n  name = &quot;matesr&quot;\n  url = &quot;http://gitlab.capd.net/&quot;\n  token = &quot;977bec174e00a0960f6b3133d7f3c3&quot;\n  executor = &quot;shell&quot;\n  [runners.cache]\n\n[[runners]]\n  name = &quot;hexO&quot;\n  url = &quot;http://gitlab.capd.net/&quot;\n  token = &quot;75e82f2298901dfb7aec37a47bacae&quot;\n  executor = &quot;shell&quot;\n  [runners.cache]\n\n[[runners]]\n  name = &quot;asiainfo-hexo&quot;\n  url = &quot;http://gitlab.capd.net/&quot;\n  token = &quot;6765a30042ecdc79e41c2b085f2999&quot;\n  executor = &quot;shell&quot;\n  [runners.cache]\n\n[[runners]]\n  name = &quot;hexo-jiacy&quot;\n  url = &quot;http://10.1.241.33/&quot;\n  token = &quot;d9034efa87b159c7c98794cfad9f8f&quot;\n  executor = &quot;shell&quot;\n  [runners.cache]\n~     \n到这里我们的Runner就安装配置好了，接下来是对项目根目录中.gitlab-ci.yml进行配置。               \n</code></pre><h5 id=\"（2）配置构建任务\"><a href=\"#（2）配置构建任务\" class=\"headerlink\" title=\"（2）配置构建任务\"></a>（2）配置构建任务</h5><p>   （1）在项目根目录添加.gitlab-ci.yml文件</p>\n<pre><code>image: node:8.11.2\n\npages:\n  cache:\n    paths:\n    - node_modules/\n\n  script:\n  - npm install hexo-cli -g\n  - npm install\n  - hexo deploy\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\n</code></pre><p>  （2）在项目根目录添加.gitlab-ci.yml文件</p>\n<p><img src=\"\\images\\hexo\\pasted-5.png\" alt=\"upload successful\"></p>\n<p>这样整个CI流程就配置完了，项目是hexo，就会生产我们的页面，在Pages中查看：</p>\n<p><img src=\"\\images\\hexo\\pasted-6.png\" alt=\"upload successful\"></p>\n<p>之后每次push到git仓库代码的时候都会执行项目对应的任务：</p>\n<p><img src=\"\\images\\hexo\\pasted-7.png\" alt=\"upload successful\"></p>"},{"title":"MarkDown","author":"Leonard","cover_picture":"/images/md.jpg","date":"2018-08-29T12:06:00.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\nMarkdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。\n<!-- more -->\n<The rest of contents | 余下全文>\n\nmarkdown基本语法\n\n一、标题\n    在想要设置为标题的文字前面加#来表示\n    一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。\n\n二、字体\n\n    加粗\n    要加粗的文字左右分别用两个*号包起来\n    \n    斜体\n    要倾斜的文字左右分别用一个*号包起来\n    \n    斜体加粗\n    要倾斜和加粗的文字左右分别用三个*号包起来\n    \n    删除线\n    要加删除线的文字左右分别用两个~~号包起来\n\n三、引用\n    在引用的文字前加>即可。引用也可以嵌套，如加两个>>三个>>>\n    n个...\n    貌似可以一直加下去，但没神马卵用\n\n四、分割线\n    三个或者三个以上的 - 或者 * 都可以。\n\n五、图片\n    \n    ![图片alt](图片地址 ''图片title'')\n    \n    图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n    图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n\n    示例：\n    ![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/\n    u=702257389,1274025419&fm=27&gp=0.jpg \"区块链\")\n六、超链接\n    超链接名](超链接地址 \"超链接title\")\n    title可加可不加\n    示例：\n    [简书](http://jianshu.com)\n    [百度](http://baidu.com)\n\n    <a href=\"超链接地址\" target=\"_blank\">超链接名</a>\n    例<a href=\"https://www.jianshu.com/u/1f5ac0cf6a8b\" target=\"_blank\">简书</a>\n七、列表\n* 无序列表\n    无序列表用 - + * 任何一种都可以\n* 有序列表\n    数字加点\n* 列表嵌套\n    上一级和下一级之间敲三个空格即可\n\n八、表格\n| Tables | Are | Cool |\n| ------------- |:-------------:| -----:|\n| col 3 is | right-aligned | $1600 |\n| zebra stripes | are neat | $1 |\n\n    通过使用“|”符号分割表格的每格，以及“-”减号及“:”冒号表示对齐方式，减号的个数不限，但减号至少要有一个\n\n    若没有冒号或冒号在减号左边表示左对齐\n    减号两边都有表示中间对齐\n    若在减号右边表示右对齐\n    第一行表格每类的名字一定要有以及减号和冒号的一行也一定要有，第一行属性会自动黑体加粗，即第一行是表格属性名，第二行则是表格对齐方式，第三行是表格输出的第一行内容，第四行是第二行内容，以此类推\n\n    注意上述的冒号一定要是英文模式下输入，不可在中文形式，一定要注意\n    \n九、代码\n    单行代码：代码之间分别用一个反引号包起来\n    \n    ```\n    public static void main(){\n        system.out.println(\"Hello World！\");\n    }\n    ```\n    \n十、流程图\n```flow\nst=>start: 开始\nop=>operation: My Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n&```","source":"_posts/markdown.md","raw":"title: MarkDown\nauthor: Leonard\ntags: []\ncategories:\n  - 语法手册\ncover_picture: /images/md.jpg\ndate: 2018-08-29 20:06:00\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\nMarkdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。\n<!-- more -->\n<The rest of contents | 余下全文>\n\nmarkdown基本语法\n\n一、标题\n    在想要设置为标题的文字前面加#来表示\n    一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。\n\n二、字体\n\n    加粗\n    要加粗的文字左右分别用两个*号包起来\n    \n    斜体\n    要倾斜的文字左右分别用一个*号包起来\n    \n    斜体加粗\n    要倾斜和加粗的文字左右分别用三个*号包起来\n    \n    删除线\n    要加删除线的文字左右分别用两个~~号包起来\n\n三、引用\n    在引用的文字前加>即可。引用也可以嵌套，如加两个>>三个>>>\n    n个...\n    貌似可以一直加下去，但没神马卵用\n\n四、分割线\n    三个或者三个以上的 - 或者 * 都可以。\n\n五、图片\n    \n    ![图片alt](图片地址 ''图片title'')\n    \n    图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n    图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n\n    示例：\n    ![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/\n    u=702257389,1274025419&fm=27&gp=0.jpg \"区块链\")\n六、超链接\n    超链接名](超链接地址 \"超链接title\")\n    title可加可不加\n    示例：\n    [简书](http://jianshu.com)\n    [百度](http://baidu.com)\n\n    <a href=\"超链接地址\" target=\"_blank\">超链接名</a>\n    例<a href=\"https://www.jianshu.com/u/1f5ac0cf6a8b\" target=\"_blank\">简书</a>\n七、列表\n* 无序列表\n    无序列表用 - + * 任何一种都可以\n* 有序列表\n    数字加点\n* 列表嵌套\n    上一级和下一级之间敲三个空格即可\n\n八、表格\n| Tables | Are | Cool |\n| ------------- |:-------------:| -----:|\n| col 3 is | right-aligned | $1600 |\n| zebra stripes | are neat | $1 |\n\n    通过使用“|”符号分割表格的每格，以及“-”减号及“:”冒号表示对齐方式，减号的个数不限，但减号至少要有一个\n\n    若没有冒号或冒号在减号左边表示左对齐\n    减号两边都有表示中间对齐\n    若在减号右边表示右对齐\n    第一行表格每类的名字一定要有以及减号和冒号的一行也一定要有，第一行属性会自动黑体加粗，即第一行是表格属性名，第二行则是表格对齐方式，第三行是表格输出的第一行内容，第四行是第二行内容，以此类推\n\n    注意上述的冒号一定要是英文模式下输入，不可在中文形式，一定要注意\n    \n九、代码\n    单行代码：代码之间分别用一个反引号包起来\n    \n    ```\n    public static void main(){\n        system.out.println(\"Hello World！\");\n    }\n    ```\n    \n十、流程图\n```flow\nst=>start: 开始\nop=>operation: My Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n&```","slug":"markdown","published":1,"updated":"2018-09-06T10:59:54.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlqgwfv3000hestjtoholiyd","content":"<p><strong> MarkDown：</strong> <Excerpt in index | 首页摘要><br>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<p>markdown基本语法</p>\n<p>一、标题<br>    在想要设置为标题的文字前面加#来表示<br>    一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>\n<p>二、字体</p>\n<pre><code>加粗\n要加粗的文字左右分别用两个*号包起来\n\n斜体\n要倾斜的文字左右分别用一个*号包起来\n\n斜体加粗\n要倾斜和加粗的文字左右分别用三个*号包起来\n\n删除线\n要加删除线的文字左右分别用两个~~号包起来\n</code></pre><p>三、引用<br>    在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>    n个…<br>    貌似可以一直加下去，但没神马卵用</p>\n<p>四、分割线<br>    三个或者三个以上的 - 或者 * 都可以。</p>\n<p>五、图片</p>\n<pre><code>![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)\n\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n\n示例：\n![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/\nu=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)\n</code></pre><p>六、超链接<br>    超链接名](超链接地址 “超链接title”)<br>    title可加可不加<br>    示例：<br>    <a href=\"http://jianshu.com\">简书</a><br>    <a href=\"http://baidu.com\">百度</a></p>\n<pre><code>&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;\n例&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;\n</code></pre><p>七、列表</p>\n<ul>\n<li>无序列表<br>  无序列表用 - + * 任何一种都可以</li>\n<li>有序列表<br>  数字加点</li>\n<li>列表嵌套<br>  上一级和下一级之间敲三个空格即可</li>\n</ul>\n<p>八、表格<br>| Tables | Are | Cool |<br>| ————- |:————-:| —–:|<br>| col 3 is | right-aligned | $1600 |<br>| zebra stripes | are neat | $1 |</p>\n<pre><code>通过使用“|”符号分割表格的每格，以及“-”减号及“:”冒号表示对齐方式，减号的个数不限，但减号至少要有一个\n\n若没有冒号或冒号在减号左边表示左对齐\n减号两边都有表示中间对齐\n若在减号右边表示右对齐\n第一行表格每类的名字一定要有以及减号和冒号的一行也一定要有，第一行属性会自动黑体加粗，即第一行是表格属性名，第二行则是表格对齐方式，第三行是表格输出的第一行内容，第四行是第二行内容，以此类推\n\n注意上述的冒号一定要是英文模式下输入，不可在中文形式，一定要注意\n</code></pre><p>九、代码<br>    单行代码：代码之间分别用一个反引号包起来</p>\n<pre><code><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    system.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"Hello World！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>十、流程图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: My Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br><span class=\"line\">&amp;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><strong> MarkDown：</strong> <Excerpt in index | 首页摘要><br>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<p>markdown基本语法</p>\n<p>一、标题<br>    在想要设置为标题的文字前面加#来表示<br>    一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>\n<p>二、字体</p>\n<pre><code>加粗\n要加粗的文字左右分别用两个*号包起来\n\n斜体\n要倾斜的文字左右分别用一个*号包起来\n\n斜体加粗\n要倾斜和加粗的文字左右分别用三个*号包起来\n\n删除线\n要加删除线的文字左右分别用两个~~号包起来\n</code></pre><p>三、引用<br>    在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>    n个…<br>    貌似可以一直加下去，但没神马卵用</p>\n<p>四、分割线<br>    三个或者三个以上的 - 或者 * 都可以。</p>\n<p>五、图片</p>\n<pre><code>![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)\n\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n\n示例：\n![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/\nu=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)\n</code></pre><p>六、超链接<br>    超链接名](超链接地址 “超链接title”)<br>    title可加可不加<br>    示例：<br>    <a href=\"http://jianshu.com\">简书</a><br>    <a href=\"http://baidu.com\">百度</a></p>\n<pre><code>&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;\n例&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;\n</code></pre><p>七、列表</p>\n<ul>\n<li>无序列表<br>  无序列表用 - + * 任何一种都可以</li>\n<li>有序列表<br>  数字加点</li>\n<li>列表嵌套<br>  上一级和下一级之间敲三个空格即可</li>\n</ul>\n<p>八、表格<br>| Tables | Are | Cool |<br>| ————- |:————-:| —–:|<br>| col 3 is | right-aligned | $1600 |<br>| zebra stripes | are neat | $1 |</p>\n<pre><code>通过使用“|”符号分割表格的每格，以及“-”减号及“:”冒号表示对齐方式，减号的个数不限，但减号至少要有一个\n\n若没有冒号或冒号在减号左边表示左对齐\n减号两边都有表示中间对齐\n若在减号右边表示右对齐\n第一行表格每类的名字一定要有以及减号和冒号的一行也一定要有，第一行属性会自动黑体加粗，即第一行是表格属性名，第二行则是表格对齐方式，第三行是表格输出的第一行内容，第四行是第二行内容，以此类推\n\n注意上述的冒号一定要是英文模式下输入，不可在中文形式，一定要注意\n</code></pre><p>九、代码<br>    单行代码：代码之间分别用一个反引号包起来</p>\n<pre><code><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    system.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"Hello World！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>十、流程图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: My Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br><span class=\"line\">&amp;</span><br></pre></td></tr></table></figure></p>"},{"title":"Phoenix操作hbase语句","author":"Leonard","cover_picture":"/images/docker.jpg","date":"2018-08-30T03:26:00.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\nhbase 提供很方便的shell脚本，可以对数据表进行 CURD 操作，但是毕竟是有一定的学习成本的，基本上对于开发来讲，\nsql 语句都是看家本领，那么，有没有一种方法可以把 sql 语句转换成 hbase的原生API呢？ 这样就可以通过普通平常的 sql 来对hbase 进行数据的管理，使用成本大大降低。Apache Phoenix 组件就完成了这种需求\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n创建表：\n\n    CREATE TABLE \"TEST\" (\n    \"ROW\" VARCHAR PRIMARY KEY,\n    \"ORDER_LINE_ID\" VARCHAR,\n    \"ORDER_ID\" VARCHAR,\n    \"IN_MODE_CODE\" VARCHAR\n    )\n\n表赋值：\n\n    upsert into TEST values('000027effafe62a196bd8012b0dd439ad1b0294a15000','NY','NewYork','8143197');\n\n删除表：\n    \n    drop table TEST；\n\n删除记录：\n\n    delete from TEST where ORDER_ID='NewYork';\n\n查找表：\n    \n    SELECT * FROM TEST LIMIT 1;\n\n添加表字段：\n\n    ALTER TABLE TEST ADD PRODUCT_ID VARCHAR;\n\n删除表字段：\n    \n    ALTER TABLE TEST  DROP COLUMN PRODUCT_ID;","source":"_posts/phoenix.md","raw":"title: Phoenix操作hbase语句\nauthor: Leonard\ncover_picture: /images/docker.jpg\ntags: []\ncategories: [玩转框架,大数据]\ndate: 2018-08-30 11:26:00\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\nhbase 提供很方便的shell脚本，可以对数据表进行 CURD 操作，但是毕竟是有一定的学习成本的，基本上对于开发来讲，\nsql 语句都是看家本领，那么，有没有一种方法可以把 sql 语句转换成 hbase的原生API呢？ 这样就可以通过普通平常的 sql 来对hbase 进行数据的管理，使用成本大大降低。Apache Phoenix 组件就完成了这种需求\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n创建表：\n\n    CREATE TABLE \"TEST\" (\n    \"ROW\" VARCHAR PRIMARY KEY,\n    \"ORDER_LINE_ID\" VARCHAR,\n    \"ORDER_ID\" VARCHAR,\n    \"IN_MODE_CODE\" VARCHAR\n    )\n\n表赋值：\n\n    upsert into TEST values('000027effafe62a196bd8012b0dd439ad1b0294a15000','NY','NewYork','8143197');\n\n删除表：\n    \n    drop table TEST；\n\n删除记录：\n\n    delete from TEST where ORDER_ID='NewYork';\n\n查找表：\n    \n    SELECT * FROM TEST LIMIT 1;\n\n添加表字段：\n\n    ALTER TABLE TEST ADD PRODUCT_ID VARCHAR;\n\n删除表字段：\n    \n    ALTER TABLE TEST  DROP COLUMN PRODUCT_ID;","slug":"phoenix","published":1,"updated":"2018-09-06T11:08:12.319Z","_id":"cjlqgwfv6000iestjr3hcf0ch","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong> Phoenix操作hbase语句：</strong> <Excerpt in index | 首页摘要><br>hbase 提供很方便的shell脚本，可以对数据表进行 CURD 操作，但是毕竟是有一定的学习成本的，基本上对于开发来讲，<br>sql 语句都是看家本领，那么，有没有一种方法可以把 sql 语句转换成 hbase的原生API呢？ 这样就可以通过普通平常的 sql 来对hbase 进行数据的管理，使用成本大大降低。Apache Phoenix 组件就完成了这种需求<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n\n<p>创建表：</p>\n<pre><code>CREATE TABLE &quot;TEST&quot; (\n&quot;ROW&quot; VARCHAR PRIMARY KEY,\n&quot;ORDER_LINE_ID&quot; VARCHAR,\n&quot;ORDER_ID&quot; VARCHAR,\n&quot;IN_MODE_CODE&quot; VARCHAR\n)\n</code></pre><p>表赋值：</p>\n<pre><code>upsert into TEST values(&apos;000027effafe62a196bd8012b0dd439ad1b0294a15000&apos;,&apos;NY&apos;,&apos;NewYork&apos;,&apos;8143197&apos;);\n</code></pre><p>删除表：</p>\n<pre><code>drop table TEST；\n</code></pre><p>删除记录：</p>\n<pre><code>delete from TEST where ORDER_ID=&apos;NewYork&apos;;\n</code></pre><p>查找表：</p>\n<pre><code>SELECT * FROM TEST LIMIT 1;\n</code></pre><p>添加表字段：</p>\n<pre><code>ALTER TABLE TEST ADD PRODUCT_ID VARCHAR;\n</code></pre><p>删除表字段：</p>\n<pre><code>ALTER TABLE TEST  DROP COLUMN PRODUCT_ID;\n</code></pre>","site":{"data":{}},"excerpt":"<p><strong> Phoenix操作hbase语句：</strong> <Excerpt in index | 首页摘要><br>hbase 提供很方便的shell脚本，可以对数据表进行 CURD 操作，但是毕竟是有一定的学习成本的，基本上对于开发来讲，<br>sql 语句都是看家本领，那么，有没有一种方法可以把 sql 语句转换成 hbase的原生API呢？ 这样就可以通过普通平常的 sql 来对hbase 进行数据的管理，使用成本大大降低。Apache Phoenix 组件就完成了这种需求<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n\n<p>创建表：</p>\n<pre><code>CREATE TABLE &quot;TEST&quot; (\n&quot;ROW&quot; VARCHAR PRIMARY KEY,\n&quot;ORDER_LINE_ID&quot; VARCHAR,\n&quot;ORDER_ID&quot; VARCHAR,\n&quot;IN_MODE_CODE&quot; VARCHAR\n)\n</code></pre><p>表赋值：</p>\n<pre><code>upsert into TEST values(&apos;000027effafe62a196bd8012b0dd439ad1b0294a15000&apos;,&apos;NY&apos;,&apos;NewYork&apos;,&apos;8143197&apos;);\n</code></pre><p>删除表：</p>\n<pre><code>drop table TEST；\n</code></pre><p>删除记录：</p>\n<pre><code>delete from TEST where ORDER_ID=&apos;NewYork&apos;;\n</code></pre><p>查找表：</p>\n<pre><code>SELECT * FROM TEST LIMIT 1;\n</code></pre><p>添加表字段：</p>\n<pre><code>ALTER TABLE TEST ADD PRODUCT_ID VARCHAR;\n</code></pre><p>删除表字段：</p>\n<pre><code>ALTER TABLE TEST  DROP COLUMN PRODUCT_ID;\n</code></pre>"},{"title":"Windows 命令行","cover_picture":"/images/windows.jpg","date":"2018-08-29T12:20:00.000Z","_content":"---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n打开\"运行\"对话框（Win+R），输入cmd，打开控制台命令窗口...\n也可以通过cmd /c 命令 和 cmd /k 命令的方式来直接运行命令\n注：/c表示执行完命令后关闭cmd窗口；/k表示执行完命令后保留cmd窗口\n<!-- more -->\n<The rest of contents | 余下全文>\n\nwindows 命令行d\n\ndir (directory) ：列出当前目录下的文件以及文件夹\nmd (make directory)： 创建目录\nrd (remove directory)：删除目录\ncd (change directory)：进入指定目录\ncd.. : 退回到上一级目录\ncd\\ : 退回到根目录\ndel：删除文件\nexit：退出dos命令行\ncls (clear screen): 清屏\n\n有关某个命令的详细信息，请键入 HELP 命令名\nASSOC 显示或修改文件扩展名关联。\nATTRIB 显示或更改文件属性。\nBREAK 设置或清除扩展式 CTRL+C 检查。\nBCDEDIT 设置启动数据库中的属性以控制启动加载。\nCACLS 显示或修改文件的访问控制列表(ACL)。\nCALL 从另一个批处理程序调用这一个。\nCD 显示当前目录的名称或将其更改。\nCHCP 显示或设置活动代码页数。\nCHDIR 显示当前目录的名称或将其更改。\nCHKDSK 检查磁盘并显示状态报告。\nCHKNTFS 显示或修改启动时间磁盘检查。\nCLS 清除屏幕。\nCMD 打开另一个 Windows 命令解释程序窗口。\nCOLOR 设置默认控制台前景和背景颜色。\nCOMP 比较两个或两套文件的内容。\nCOMPACT 显示或更改 NTFS 分区上文件的压缩。\nCONVERT 将 FAT 卷转换成 NTFS。您不能转换\n当前驱动器。\nCOPY 将至少一个文件复制到另一个位置。\nDATE 显示或设置日期。\nDEL 删除至少一个文件。\nDIR 显示一个目录中的文件和子目录。\nDISKCOMP 比较两个软盘的内容。\nDISKCOPY 将一个软盘的内容复制到另一个软盘。\nDISKPART 显示或配置磁盘分区属性。\nDOSKEY 编辑命令行、调用 Windows 命令并创建宏。\nDRIVERQUERY 显示当前设备驱动程序状态和属性。\nECHO 显示消息，或将命令回显打开或关上。\nENDLOCAL 结束批文件中环境更改的本地化。\nERASE 删除一个或多个文件。\nEXIT 退出 CMD.EXE 程序(命令解释程序)。\nFC 比较两个文件或两个文件集并显示它们之间的不同。\nFIND 在一个或多个文件中搜索一个文本字符串。\nFINDSTR 在多个文件中搜索字符串。\nFOR 为一套文件中的每个文件运行一个指定的命令。\nFORMAT 格式化磁盘，以便跟 Windows 使用。\nFSUTIL 显示或配置文件系统的属性。\nFTYPE 显示或修改用在文件扩展名关联的文件类型。\nGOTO 将 Windows 命令解释程序指向批处理程序\n中某个带标签的行。\nGPRESULT 显示机器或用户的组策略信息。\nGRAFTABL 启用 Windows 在图形模式显示扩展字符集。\nHELP 提供 Windows 命令的帮助信息。\nICACLS 显示、修改、备份或还原文件和\n目录的 ACL。\nIF 在批处理程序中执行有条件的处理过程。\nLABEL 创建、更改或删除磁盘的卷标。\nMD 创建一个目录。\nMKDIR 创建一个目录。\nMKLINK 创建符号链接和硬链接\nMODE 配置系统设备。\nMORE 逐屏显示输出。\nMOVE 将一个或多个文件从一个目录移动到另一个目录。\nOPENFILES 显示远程用户为了文件共享而打开的文件。\nPATH 为可执行文件显示或设置搜索路径。\nPAUSE 停止批处理文件的处理并显示信息。\nPOPD 还原由 PUSHD 保存的当前目录上一次的值。\nPRINT 打印一个文本文件。\nPROMPT 改变 Windows 命令提示。\nPUSHD 保存当前目录，然后对其进行更改。\nRD 删除目录。\nRECOVER 从损坏的磁盘中恢复可读取的信息。\nREM 记录批处理文件或 CONFIG.SYS 中的注释。\nREN 重新命名文件。\nRENAME 重新命名文件。\nREPLACE 替换文件。\nRMDIR 删除目录。\nROBOCOPY 复制文件和目录树的高级实用程序\nSET 显示、设置或删除 Windows 环境变量。\nSETLOCAL 开始用批文件改变环境的本地化。\nSC 显示或配置服务(后台处理)。\nSCHTASKS 安排命令和程序在一部计算机上按计划运行。\nSHIFT 调整批处理文件中可替换参数的位置。\nSHUTDOWN 让机器在本地或远程正确关闭。\nSORT 将输入排序。\nSTART 打开单独视窗运行指定程序或命令。\nSUBST 将驱动器号与路径关联。\nSYSTEMINFO 显示机器的具体的属性和配置。\nTASKLIST 显示包括服务的所有当前运行的任务。\nTASKKILL 终止正在运行的进程或应用程序。\nTIME 显示或设置系统时间。\nTITLE 设置 CMD.EXE 会话的窗口标题。\nTREE 以图形显示启动器或路径的目录结构。\nTYPE 显示文本文件的内容。\nVER 显示 Windows 的版本。\nVERIFY 告诉 Windows 验证文件是否正确写入磁盘。\nVOL 显示磁盘卷标和序列号。\nXCOPY 复制文件和目录树。\nWMIC 在交互命令外壳里显示 WMI 信息。","source":"_posts/windows.md","raw":"title: windows 命令行\ncover_picture: /images/windows.jpg\ntags: []\ncategories:\n  - 语法手册\ndate: 2018-08-29 20:20:00\n---\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n打开\"运行\"对话框（Win+R），输入cmd，打开控制台命令窗口...\n也可以通过cmd /c 命令 和 cmd /k 命令的方式来直接运行命令\n注：/c表示执行完命令后关闭cmd窗口；/k表示执行完命令后保留cmd窗口\n<!-- more -->\n<The rest of contents | 余下全文>\n\nwindows 命令行d\n\ndir (directory) ：列出当前目录下的文件以及文件夹\nmd (make directory)： 创建目录\nrd (remove directory)：删除目录\ncd (change directory)：进入指定目录\ncd.. : 退回到上一级目录\ncd\\ : 退回到根目录\ndel：删除文件\nexit：退出dos命令行\ncls (clear screen): 清屏\n\n有关某个命令的详细信息，请键入 HELP 命令名\nASSOC 显示或修改文件扩展名关联。\nATTRIB 显示或更改文件属性。\nBREAK 设置或清除扩展式 CTRL+C 检查。\nBCDEDIT 设置启动数据库中的属性以控制启动加载。\nCACLS 显示或修改文件的访问控制列表(ACL)。\nCALL 从另一个批处理程序调用这一个。\nCD 显示当前目录的名称或将其更改。\nCHCP 显示或设置活动代码页数。\nCHDIR 显示当前目录的名称或将其更改。\nCHKDSK 检查磁盘并显示状态报告。\nCHKNTFS 显示或修改启动时间磁盘检查。\nCLS 清除屏幕。\nCMD 打开另一个 Windows 命令解释程序窗口。\nCOLOR 设置默认控制台前景和背景颜色。\nCOMP 比较两个或两套文件的内容。\nCOMPACT 显示或更改 NTFS 分区上文件的压缩。\nCONVERT 将 FAT 卷转换成 NTFS。您不能转换\n当前驱动器。\nCOPY 将至少一个文件复制到另一个位置。\nDATE 显示或设置日期。\nDEL 删除至少一个文件。\nDIR 显示一个目录中的文件和子目录。\nDISKCOMP 比较两个软盘的内容。\nDISKCOPY 将一个软盘的内容复制到另一个软盘。\nDISKPART 显示或配置磁盘分区属性。\nDOSKEY 编辑命令行、调用 Windows 命令并创建宏。\nDRIVERQUERY 显示当前设备驱动程序状态和属性。\nECHO 显示消息，或将命令回显打开或关上。\nENDLOCAL 结束批文件中环境更改的本地化。\nERASE 删除一个或多个文件。\nEXIT 退出 CMD.EXE 程序(命令解释程序)。\nFC 比较两个文件或两个文件集并显示它们之间的不同。\nFIND 在一个或多个文件中搜索一个文本字符串。\nFINDSTR 在多个文件中搜索字符串。\nFOR 为一套文件中的每个文件运行一个指定的命令。\nFORMAT 格式化磁盘，以便跟 Windows 使用。\nFSUTIL 显示或配置文件系统的属性。\nFTYPE 显示或修改用在文件扩展名关联的文件类型。\nGOTO 将 Windows 命令解释程序指向批处理程序\n中某个带标签的行。\nGPRESULT 显示机器或用户的组策略信息。\nGRAFTABL 启用 Windows 在图形模式显示扩展字符集。\nHELP 提供 Windows 命令的帮助信息。\nICACLS 显示、修改、备份或还原文件和\n目录的 ACL。\nIF 在批处理程序中执行有条件的处理过程。\nLABEL 创建、更改或删除磁盘的卷标。\nMD 创建一个目录。\nMKDIR 创建一个目录。\nMKLINK 创建符号链接和硬链接\nMODE 配置系统设备。\nMORE 逐屏显示输出。\nMOVE 将一个或多个文件从一个目录移动到另一个目录。\nOPENFILES 显示远程用户为了文件共享而打开的文件。\nPATH 为可执行文件显示或设置搜索路径。\nPAUSE 停止批处理文件的处理并显示信息。\nPOPD 还原由 PUSHD 保存的当前目录上一次的值。\nPRINT 打印一个文本文件。\nPROMPT 改变 Windows 命令提示。\nPUSHD 保存当前目录，然后对其进行更改。\nRD 删除目录。\nRECOVER 从损坏的磁盘中恢复可读取的信息。\nREM 记录批处理文件或 CONFIG.SYS 中的注释。\nREN 重新命名文件。\nRENAME 重新命名文件。\nREPLACE 替换文件。\nRMDIR 删除目录。\nROBOCOPY 复制文件和目录树的高级实用程序\nSET 显示、设置或删除 Windows 环境变量。\nSETLOCAL 开始用批文件改变环境的本地化。\nSC 显示或配置服务(后台处理)。\nSCHTASKS 安排命令和程序在一部计算机上按计划运行。\nSHIFT 调整批处理文件中可替换参数的位置。\nSHUTDOWN 让机器在本地或远程正确关闭。\nSORT 将输入排序。\nSTART 打开单独视窗运行指定程序或命令。\nSUBST 将驱动器号与路径关联。\nSYSTEMINFO 显示机器的具体的属性和配置。\nTASKLIST 显示包括服务的所有当前运行的任务。\nTASKKILL 终止正在运行的进程或应用程序。\nTIME 显示或设置系统时间。\nTITLE 设置 CMD.EXE 会话的窗口标题。\nTREE 以图形显示启动器或路径的目录结构。\nTYPE 显示文本文件的内容。\nVER 显示 Windows 的版本。\nVERIFY 告诉 Windows 验证文件是否正确写入磁盘。\nVOL 显示磁盘卷标和序列号。\nXCOPY 复制文件和目录树。\nWMIC 在交互命令外壳里显示 WMI 信息。","slug":"windows","published":1,"updated":"2018-09-06T10:55:15.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlqgwfva000lestj3ahfkn7k","content":"<hr>\n<p><strong> Windows 命令行：</strong> <Excerpt in index | 首页摘要><br>打开”运行”对话框（Win+R），输入cmd，打开控制台命令窗口…<br>也可以通过cmd /c 命令 和 cmd /k 命令的方式来直接运行命令<br>注：/c表示执行完命令后关闭cmd窗口；/k表示执行完命令后保留cmd窗口<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<p>windows 命令行d</p>\n<p>dir (directory) ：列出当前目录下的文件以及文件夹<br>md (make directory)： 创建目录<br>rd (remove directory)：删除目录<br>cd (change directory)：进入指定目录<br>cd.. : 退回到上一级目录<br>cd\\ : 退回到根目录<br>del：删除文件<br>exit：退出dos命令行<br>cls (clear screen): 清屏</p>\n<p>有关某个命令的详细信息，请键入 HELP 命令名<br>ASSOC 显示或修改文件扩展名关联。<br>ATTRIB 显示或更改文件属性。<br>BREAK 设置或清除扩展式 CTRL+C 检查。<br>BCDEDIT 设置启动数据库中的属性以控制启动加载。<br>CACLS 显示或修改文件的访问控制列表(ACL)。<br>CALL 从另一个批处理程序调用这一个。<br>CD 显示当前目录的名称或将其更改。<br>CHCP 显示或设置活动代码页数。<br>CHDIR 显示当前目录的名称或将其更改。<br>CHKDSK 检查磁盘并显示状态报告。<br>CHKNTFS 显示或修改启动时间磁盘检查。<br>CLS 清除屏幕。<br>CMD 打开另一个 Windows 命令解释程序窗口。<br>COLOR 设置默认控制台前景和背景颜色。<br>COMP 比较两个或两套文件的内容。<br>COMPACT 显示或更改 NTFS 分区上文件的压缩。<br>CONVERT 将 FAT 卷转换成 NTFS。您不能转换<br>当前驱动器。<br>COPY 将至少一个文件复制到另一个位置。<br>DATE 显示或设置日期。<br>DEL 删除至少一个文件。<br>DIR 显示一个目录中的文件和子目录。<br>DISKCOMP 比较两个软盘的内容。<br>DISKCOPY 将一个软盘的内容复制到另一个软盘。<br>DISKPART 显示或配置磁盘分区属性。<br>DOSKEY 编辑命令行、调用 Windows 命令并创建宏。<br>DRIVERQUERY 显示当前设备驱动程序状态和属性。<br>ECHO 显示消息，或将命令回显打开或关上。<br>ENDLOCAL 结束批文件中环境更改的本地化。<br>ERASE 删除一个或多个文件。<br>EXIT 退出 CMD.EXE 程序(命令解释程序)。<br>FC 比较两个文件或两个文件集并显示它们之间的不同。<br>FIND 在一个或多个文件中搜索一个文本字符串。<br>FINDSTR 在多个文件中搜索字符串。<br>FOR 为一套文件中的每个文件运行一个指定的命令。<br>FORMAT 格式化磁盘，以便跟 Windows 使用。<br>FSUTIL 显示或配置文件系统的属性。<br>FTYPE 显示或修改用在文件扩展名关联的文件类型。<br>GOTO 将 Windows 命令解释程序指向批处理程序<br>中某个带标签的行。<br>GPRESULT 显示机器或用户的组策略信息。<br>GRAFTABL 启用 Windows 在图形模式显示扩展字符集。<br>HELP 提供 Windows 命令的帮助信息。<br>ICACLS 显示、修改、备份或还原文件和<br>目录的 ACL。<br>IF 在批处理程序中执行有条件的处理过程。<br>LABEL 创建、更改或删除磁盘的卷标。<br>MD 创建一个目录。<br>MKDIR 创建一个目录。<br>MKLINK 创建符号链接和硬链接<br>MODE 配置系统设备。<br>MORE 逐屏显示输出。<br>MOVE 将一个或多个文件从一个目录移动到另一个目录。<br>OPENFILES 显示远程用户为了文件共享而打开的文件。<br>PATH 为可执行文件显示或设置搜索路径。<br>PAUSE 停止批处理文件的处理并显示信息。<br>POPD 还原由 PUSHD 保存的当前目录上一次的值。<br>PRINT 打印一个文本文件。<br>PROMPT 改变 Windows 命令提示。<br>PUSHD 保存当前目录，然后对其进行更改。<br>RD 删除目录。<br>RECOVER 从损坏的磁盘中恢复可读取的信息。<br>REM 记录批处理文件或 CONFIG.SYS 中的注释。<br>REN 重新命名文件。<br>RENAME 重新命名文件。<br>REPLACE 替换文件。<br>RMDIR 删除目录。<br>ROBOCOPY 复制文件和目录树的高级实用程序<br>SET 显示、设置或删除 Windows 环境变量。<br>SETLOCAL 开始用批文件改变环境的本地化。<br>SC 显示或配置服务(后台处理)。<br>SCHTASKS 安排命令和程序在一部计算机上按计划运行。<br>SHIFT 调整批处理文件中可替换参数的位置。<br>SHUTDOWN 让机器在本地或远程正确关闭。<br>SORT 将输入排序。<br>START 打开单独视窗运行指定程序或命令。<br>SUBST 将驱动器号与路径关联。<br>SYSTEMINFO 显示机器的具体的属性和配置。<br>TASKLIST 显示包括服务的所有当前运行的任务。<br>TASKKILL 终止正在运行的进程或应用程序。<br>TIME 显示或设置系统时间。<br>TITLE 设置 CMD.EXE 会话的窗口标题。<br>TREE 以图形显示启动器或路径的目录结构。<br>TYPE 显示文本文件的内容。<br>VER 显示 Windows 的版本。<br>VERIFY 告诉 Windows 验证文件是否正确写入磁盘。<br>VOL 显示磁盘卷标和序列号。<br>XCOPY 复制文件和目录树。<br>WMIC 在交互命令外壳里显示 WMI 信息。</p>\n","site":{"data":{}},"excerpt":"<hr>\n<p><strong> Windows 命令行：</strong> <Excerpt in index | 首页摘要><br>打开”运行”对话框（Win+R），输入cmd，打开控制台命令窗口…<br>也可以通过cmd /c 命令 和 cmd /k 命令的方式来直接运行命令<br>注：/c表示执行完命令后关闭cmd窗口；/k表示执行完命令后保留cmd窗口<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<p>windows 命令行d</p>\n<p>dir (directory) ：列出当前目录下的文件以及文件夹<br>md (make directory)： 创建目录<br>rd (remove directory)：删除目录<br>cd (change directory)：进入指定目录<br>cd.. : 退回到上一级目录<br>cd\\ : 退回到根目录<br>del：删除文件<br>exit：退出dos命令行<br>cls (clear screen): 清屏</p>\n<p>有关某个命令的详细信息，请键入 HELP 命令名<br>ASSOC 显示或修改文件扩展名关联。<br>ATTRIB 显示或更改文件属性。<br>BREAK 设置或清除扩展式 CTRL+C 检查。<br>BCDEDIT 设置启动数据库中的属性以控制启动加载。<br>CACLS 显示或修改文件的访问控制列表(ACL)。<br>CALL 从另一个批处理程序调用这一个。<br>CD 显示当前目录的名称或将其更改。<br>CHCP 显示或设置活动代码页数。<br>CHDIR 显示当前目录的名称或将其更改。<br>CHKDSK 检查磁盘并显示状态报告。<br>CHKNTFS 显示或修改启动时间磁盘检查。<br>CLS 清除屏幕。<br>CMD 打开另一个 Windows 命令解释程序窗口。<br>COLOR 设置默认控制台前景和背景颜色。<br>COMP 比较两个或两套文件的内容。<br>COMPACT 显示或更改 NTFS 分区上文件的压缩。<br>CONVERT 将 FAT 卷转换成 NTFS。您不能转换<br>当前驱动器。<br>COPY 将至少一个文件复制到另一个位置。<br>DATE 显示或设置日期。<br>DEL 删除至少一个文件。<br>DIR 显示一个目录中的文件和子目录。<br>DISKCOMP 比较两个软盘的内容。<br>DISKCOPY 将一个软盘的内容复制到另一个软盘。<br>DISKPART 显示或配置磁盘分区属性。<br>DOSKEY 编辑命令行、调用 Windows 命令并创建宏。<br>DRIVERQUERY 显示当前设备驱动程序状态和属性。<br>ECHO 显示消息，或将命令回显打开或关上。<br>ENDLOCAL 结束批文件中环境更改的本地化。<br>ERASE 删除一个或多个文件。<br>EXIT 退出 CMD.EXE 程序(命令解释程序)。<br>FC 比较两个文件或两个文件集并显示它们之间的不同。<br>FIND 在一个或多个文件中搜索一个文本字符串。<br>FINDSTR 在多个文件中搜索字符串。<br>FOR 为一套文件中的每个文件运行一个指定的命令。<br>FORMAT 格式化磁盘，以便跟 Windows 使用。<br>FSUTIL 显示或配置文件系统的属性。<br>FTYPE 显示或修改用在文件扩展名关联的文件类型。<br>GOTO 将 Windows 命令解释程序指向批处理程序<br>中某个带标签的行。<br>GPRESULT 显示机器或用户的组策略信息。<br>GRAFTABL 启用 Windows 在图形模式显示扩展字符集。<br>HELP 提供 Windows 命令的帮助信息。<br>ICACLS 显示、修改、备份或还原文件和<br>目录的 ACL。<br>IF 在批处理程序中执行有条件的处理过程。<br>LABEL 创建、更改或删除磁盘的卷标。<br>MD 创建一个目录。<br>MKDIR 创建一个目录。<br>MKLINK 创建符号链接和硬链接<br>MODE 配置系统设备。<br>MORE 逐屏显示输出。<br>MOVE 将一个或多个文件从一个目录移动到另一个目录。<br>OPENFILES 显示远程用户为了文件共享而打开的文件。<br>PATH 为可执行文件显示或设置搜索路径。<br>PAUSE 停止批处理文件的处理并显示信息。<br>POPD 还原由 PUSHD 保存的当前目录上一次的值。<br>PRINT 打印一个文本文件。<br>PROMPT 改变 Windows 命令提示。<br>PUSHD 保存当前目录，然后对其进行更改。<br>RD 删除目录。<br>RECOVER 从损坏的磁盘中恢复可读取的信息。<br>REM 记录批处理文件或 CONFIG.SYS 中的注释。<br>REN 重新命名文件。<br>RENAME 重新命名文件。<br>REPLACE 替换文件。<br>RMDIR 删除目录。<br>ROBOCOPY 复制文件和目录树的高级实用程序<br>SET 显示、设置或删除 Windows 环境变量。<br>SETLOCAL 开始用批文件改变环境的本地化。<br>SC 显示或配置服务(后台处理)。<br>SCHTASKS 安排命令和程序在一部计算机上按计划运行。<br>SHIFT 调整批处理文件中可替换参数的位置。<br>SHUTDOWN 让机器在本地或远程正确关闭。<br>SORT 将输入排序。<br>START 打开单独视窗运行指定程序或命令。<br>SUBST 将驱动器号与路径关联。<br>SYSTEMINFO 显示机器的具体的属性和配置。<br>TASKLIST 显示包括服务的所有当前运行的任务。<br>TASKKILL 终止正在运行的进程或应用程序。<br>TIME 显示或设置系统时间。<br>TITLE 设置 CMD.EXE 会话的窗口标题。<br>TREE 以图形显示启动器或路径的目录结构。<br>TYPE 显示文本文件的内容。<br>VER 显示 Windows 的版本。<br>VERIFY 告诉 Windows 验证文件是否正确写入磁盘。<br>VOL 显示磁盘卷标和序列号。<br>XCOPY 复制文件和目录树。<br>WMIC 在交互命令外壳里显示 WMI 信息。</p>"},{"title":"Zookeeper安装部署手册","cover_picture":"/images/zook.jpg","date":"2018-08-29T12:20:00.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\nZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。最终，将简单易用的接口和性能高效、功能稳定的系统提供给用户\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## Zookeeper安装部署手册\n### 一、环境配置\n\n### 二、操作步骤\n#### 1、下载zookeeper安装包\n    \n#### 2、将安装包上传解压到服务器指定目录\n    \n#### 3、对默认配置文件进行重命名\n    \n#### 4、修改zoo.cfg配置文件\n    \n    #发送心跳的间隔时间，单位：毫秒\n    tickTime=2000\n    #zookeeper保存数据的目录\n    dataDir=/modules/zookeeper-3.4.5-cdh5.11.1/data\n    #日志目录\n    dataLogDir=/modules/zookeeper-3.4.5-cdh5.11.1/dataLog\n    #端口\n    clientPort=2181\n    #leader和follower初始化连接时最长能忍受多少个心跳时间的间隔数\n    initLimit=5\n    #leader和follower之间发送消息，请求和英达时间长度，最长不能超过多少个tickTime的时间长度\n    syncLimit=2\n    #zookeeper机器列表，server.order这里的Order依据集群的机器个数依次进行递增，这里的server1、server2、server3表示机器IP地址\n    server.1=server1:2888:3888\n    server.2=server2:2888:3888\n    server.3=server3:2888:3888\n    \n#### 5、新建myid文件\n    \n    在server1机器中，在上面配置的data目录下，新建一个名为 myid的文件，文件内容填写 1，对的，没有听错，文件中只保留一个数字 1。\n    zookeeper是根据该文件来决定zookeeper集群各个机器的身份分配。\n    \n#### 6、将配置好的zookeeper分发到集群的所有机器\n    经过上面的五个步骤zookeeper已经配置完毕，然后将其依次拷贝的集群的其他机器中。快捷一点可以使用 scp 命令来做这件事\n    然后修改data目录的下的myid 文件中的数字，在这里即为将server2的myid内容修改为2，将server3的myid内容修改为3。对于不同的集群，根据需要进行修改，与配置文件中的order保持一致。\n    \n#### 7、启动zookeeper服务\n    \n    修改完成后，在每台机器上依次使用bin/zkServer.sh start来启动zookeeper服务，\n    待启动完成后使用 bin/zkServer.sh status来查看该机器的身份 \n    \n#### 8、启动zookeeper客户端检验服务是否可用\n    使用 bin/zkCli.sh来检验zookeeper是否可以连接成功，若出现如下提示，则表示zookeeper服务已经安装成功。","source":"_posts/zookeeper.md","raw":"title: Zookeeper安装部署手册\ncover_picture: /images/zook.jpg\ntags: []\ncategories: [玩转框架,大数据]\ndate: 2018-08-29 20:20:00\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\nZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。最终，将简单易用的接口和性能高效、功能稳定的系统提供给用户\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## Zookeeper安装部署手册\n### 一、环境配置\n\n### 二、操作步骤\n#### 1、下载zookeeper安装包\n    \n#### 2、将安装包上传解压到服务器指定目录\n    \n#### 3、对默认配置文件进行重命名\n    \n#### 4、修改zoo.cfg配置文件\n    \n    #发送心跳的间隔时间，单位：毫秒\n    tickTime=2000\n    #zookeeper保存数据的目录\n    dataDir=/modules/zookeeper-3.4.5-cdh5.11.1/data\n    #日志目录\n    dataLogDir=/modules/zookeeper-3.4.5-cdh5.11.1/dataLog\n    #端口\n    clientPort=2181\n    #leader和follower初始化连接时最长能忍受多少个心跳时间的间隔数\n    initLimit=5\n    #leader和follower之间发送消息，请求和英达时间长度，最长不能超过多少个tickTime的时间长度\n    syncLimit=2\n    #zookeeper机器列表，server.order这里的Order依据集群的机器个数依次进行递增，这里的server1、server2、server3表示机器IP地址\n    server.1=server1:2888:3888\n    server.2=server2:2888:3888\n    server.3=server3:2888:3888\n    \n#### 5、新建myid文件\n    \n    在server1机器中，在上面配置的data目录下，新建一个名为 myid的文件，文件内容填写 1，对的，没有听错，文件中只保留一个数字 1。\n    zookeeper是根据该文件来决定zookeeper集群各个机器的身份分配。\n    \n#### 6、将配置好的zookeeper分发到集群的所有机器\n    经过上面的五个步骤zookeeper已经配置完毕，然后将其依次拷贝的集群的其他机器中。快捷一点可以使用 scp 命令来做这件事\n    然后修改data目录的下的myid 文件中的数字，在这里即为将server2的myid内容修改为2，将server3的myid内容修改为3。对于不同的集群，根据需要进行修改，与配置文件中的order保持一致。\n    \n#### 7、启动zookeeper服务\n    \n    修改完成后，在每台机器上依次使用bin/zkServer.sh start来启动zookeeper服务，\n    待启动完成后使用 bin/zkServer.sh status来查看该机器的身份 \n    \n#### 8、启动zookeeper客户端检验服务是否可用\n    使用 bin/zkCli.sh来检验zookeeper是否可以连接成功，若出现如下提示，则表示zookeeper服务已经安装成功。","slug":"zookeeper","published":1,"updated":"2018-09-06T11:08:20.810Z","_id":"cjlqgwfvd000oestjryndibhp","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong> Zookeeper安装部署手册：</strong> <Excerpt in index | 首页摘要><br>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。最终，将简单易用的接口和性能高效、功能稳定的系统提供给用户<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"Zookeeper安装部署手册\"><a href=\"#Zookeeper安装部署手册\" class=\"headerlink\" title=\"Zookeeper安装部署手册\"></a>Zookeeper安装部署手册</h2><h3 id=\"一、环境配置\"><a href=\"#一、环境配置\" class=\"headerlink\" title=\"一、环境配置\"></a>一、环境配置</h3><h3 id=\"二、操作步骤\"><a href=\"#二、操作步骤\" class=\"headerlink\" title=\"二、操作步骤\"></a>二、操作步骤</h3><h4 id=\"1、下载zookeeper安装包\"><a href=\"#1、下载zookeeper安装包\" class=\"headerlink\" title=\"1、下载zookeeper安装包\"></a>1、下载zookeeper安装包</h4><h4 id=\"2、将安装包上传解压到服务器指定目录\"><a href=\"#2、将安装包上传解压到服务器指定目录\" class=\"headerlink\" title=\"2、将安装包上传解压到服务器指定目录\"></a>2、将安装包上传解压到服务器指定目录</h4><h4 id=\"3、对默认配置文件进行重命名\"><a href=\"#3、对默认配置文件进行重命名\" class=\"headerlink\" title=\"3、对默认配置文件进行重命名\"></a>3、对默认配置文件进行重命名</h4><h4 id=\"4、修改zoo-cfg配置文件\"><a href=\"#4、修改zoo-cfg配置文件\" class=\"headerlink\" title=\"4、修改zoo.cfg配置文件\"></a>4、修改zoo.cfg配置文件</h4><pre><code>#发送心跳的间隔时间，单位：毫秒\ntickTime=2000\n#zookeeper保存数据的目录\ndataDir=/modules/zookeeper-3.4.5-cdh5.11.1/data\n#日志目录\ndataLogDir=/modules/zookeeper-3.4.5-cdh5.11.1/dataLog\n#端口\nclientPort=2181\n#leader和follower初始化连接时最长能忍受多少个心跳时间的间隔数\ninitLimit=5\n#leader和follower之间发送消息，请求和英达时间长度，最长不能超过多少个tickTime的时间长度\nsyncLimit=2\n#zookeeper机器列表，server.order这里的Order依据集群的机器个数依次进行递增，这里的server1、server2、server3表示机器IP地址\nserver.1=server1:2888:3888\nserver.2=server2:2888:3888\nserver.3=server3:2888:3888\n</code></pre><h4 id=\"5、新建myid文件\"><a href=\"#5、新建myid文件\" class=\"headerlink\" title=\"5、新建myid文件\"></a>5、新建myid文件</h4><pre><code>在server1机器中，在上面配置的data目录下，新建一个名为 myid的文件，文件内容填写 1，对的，没有听错，文件中只保留一个数字 1。\nzookeeper是根据该文件来决定zookeeper集群各个机器的身份分配。\n</code></pre><h4 id=\"6、将配置好的zookeeper分发到集群的所有机器\"><a href=\"#6、将配置好的zookeeper分发到集群的所有机器\" class=\"headerlink\" title=\"6、将配置好的zookeeper分发到集群的所有机器\"></a>6、将配置好的zookeeper分发到集群的所有机器</h4><pre><code>经过上面的五个步骤zookeeper已经配置完毕，然后将其依次拷贝的集群的其他机器中。快捷一点可以使用 scp 命令来做这件事\n然后修改data目录的下的myid 文件中的数字，在这里即为将server2的myid内容修改为2，将server3的myid内容修改为3。对于不同的集群，根据需要进行修改，与配置文件中的order保持一致。\n</code></pre><h4 id=\"7、启动zookeeper服务\"><a href=\"#7、启动zookeeper服务\" class=\"headerlink\" title=\"7、启动zookeeper服务\"></a>7、启动zookeeper服务</h4><pre><code>修改完成后，在每台机器上依次使用bin/zkServer.sh start来启动zookeeper服务，\n待启动完成后使用 bin/zkServer.sh status来查看该机器的身份 \n</code></pre><h4 id=\"8、启动zookeeper客户端检验服务是否可用\"><a href=\"#8、启动zookeeper客户端检验服务是否可用\" class=\"headerlink\" title=\"8、启动zookeeper客户端检验服务是否可用\"></a>8、启动zookeeper客户端检验服务是否可用</h4><pre><code>使用 bin/zkCli.sh来检验zookeeper是否可以连接成功，若出现如下提示，则表示zookeeper服务已经安装成功。\n</code></pre>","site":{"data":{}},"excerpt":"<p><strong> Zookeeper安装部署手册：</strong> <Excerpt in index | 首页摘要><br>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。最终，将简单易用的接口和性能高效、功能稳定的系统提供给用户<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"Zookeeper安装部署手册\"><a href=\"#Zookeeper安装部署手册\" class=\"headerlink\" title=\"Zookeeper安装部署手册\"></a>Zookeeper安装部署手册</h2><h3 id=\"一、环境配置\"><a href=\"#一、环境配置\" class=\"headerlink\" title=\"一、环境配置\"></a>一、环境配置</h3><h3 id=\"二、操作步骤\"><a href=\"#二、操作步骤\" class=\"headerlink\" title=\"二、操作步骤\"></a>二、操作步骤</h3><h4 id=\"1、下载zookeeper安装包\"><a href=\"#1、下载zookeeper安装包\" class=\"headerlink\" title=\"1、下载zookeeper安装包\"></a>1、下载zookeeper安装包</h4><h4 id=\"2、将安装包上传解压到服务器指定目录\"><a href=\"#2、将安装包上传解压到服务器指定目录\" class=\"headerlink\" title=\"2、将安装包上传解压到服务器指定目录\"></a>2、将安装包上传解压到服务器指定目录</h4><h4 id=\"3、对默认配置文件进行重命名\"><a href=\"#3、对默认配置文件进行重命名\" class=\"headerlink\" title=\"3、对默认配置文件进行重命名\"></a>3、对默认配置文件进行重命名</h4><h4 id=\"4、修改zoo-cfg配置文件\"><a href=\"#4、修改zoo-cfg配置文件\" class=\"headerlink\" title=\"4、修改zoo.cfg配置文件\"></a>4、修改zoo.cfg配置文件</h4><pre><code>#发送心跳的间隔时间，单位：毫秒\ntickTime=2000\n#zookeeper保存数据的目录\ndataDir=/modules/zookeeper-3.4.5-cdh5.11.1/data\n#日志目录\ndataLogDir=/modules/zookeeper-3.4.5-cdh5.11.1/dataLog\n#端口\nclientPort=2181\n#leader和follower初始化连接时最长能忍受多少个心跳时间的间隔数\ninitLimit=5\n#leader和follower之间发送消息，请求和英达时间长度，最长不能超过多少个tickTime的时间长度\nsyncLimit=2\n#zookeeper机器列表，server.order这里的Order依据集群的机器个数依次进行递增，这里的server1、server2、server3表示机器IP地址\nserver.1=server1:2888:3888\nserver.2=server2:2888:3888\nserver.3=server3:2888:3888\n</code></pre><h4 id=\"5、新建myid文件\"><a href=\"#5、新建myid文件\" class=\"headerlink\" title=\"5、新建myid文件\"></a>5、新建myid文件</h4><pre><code>在server1机器中，在上面配置的data目录下，新建一个名为 myid的文件，文件内容填写 1，对的，没有听错，文件中只保留一个数字 1。\nzookeeper是根据该文件来决定zookeeper集群各个机器的身份分配。\n</code></pre><h4 id=\"6、将配置好的zookeeper分发到集群的所有机器\"><a href=\"#6、将配置好的zookeeper分发到集群的所有机器\" class=\"headerlink\" title=\"6、将配置好的zookeeper分发到集群的所有机器\"></a>6、将配置好的zookeeper分发到集群的所有机器</h4><pre><code>经过上面的五个步骤zookeeper已经配置完毕，然后将其依次拷贝的集群的其他机器中。快捷一点可以使用 scp 命令来做这件事\n然后修改data目录的下的myid 文件中的数字，在这里即为将server2的myid内容修改为2，将server3的myid内容修改为3。对于不同的集群，根据需要进行修改，与配置文件中的order保持一致。\n</code></pre><h4 id=\"7、启动zookeeper服务\"><a href=\"#7、启动zookeeper服务\" class=\"headerlink\" title=\"7、启动zookeeper服务\"></a>7、启动zookeeper服务</h4><pre><code>修改完成后，在每台机器上依次使用bin/zkServer.sh start来启动zookeeper服务，\n待启动完成后使用 bin/zkServer.sh status来查看该机器的身份 \n</code></pre><h4 id=\"8、启动zookeeper客户端检验服务是否可用\"><a href=\"#8、启动zookeeper客户端检验服务是否可用\" class=\"headerlink\" title=\"8、启动zookeeper客户端检验服务是否可用\"></a>8、启动zookeeper客户端检验服务是否可用</h4><pre><code>使用 bin/zkCli.sh来检验zookeeper是否可以连接成功，若出现如下提示，则表示zookeeper服务已经安装成功。\n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjlqgwfuj000cestjw6f9mv1m","category_id":"cjlqgwfuf000bestjmzl19nr2","_id":"cjlqgwfv7000jestj7wtsq255"},{"post_id":"cjlqgwft60002estjb7memnkq","category_id":"cjlqgwfuf000bestjmzl19nr2","_id":"cjlqgwfvb000mestjht4aj4k3"},{"post_id":"cjlqgwfur000destjq6xky1rd","category_id":"cjlqgwfuf000bestjmzl19nr2","_id":"cjlqgwfve000pestjdicmefmq"},{"post_id":"cjlqgwftc0005estj3j2gvsaf","category_id":"cjlqgwfuw000festjz7dj6wam","_id":"cjlqgwfvg000restjitj7y3at"},{"post_id":"cjlqgwftf0007estjk7w9tvom","category_id":"cjlqgwfuw000festjz7dj6wam","_id":"cjlqgwfvh000sestjzhkce7au"},{"post_id":"cjlqgwfua000aestjky2bbke9","category_id":"cjlqgwfuf000bestjmzl19nr2","_id":"cjlqgwfvk000xestjdckbo2ry"},{"post_id":"cjlqgwfv3000hestjtoholiyd","category_id":"cjlqgwfvi000uestjg68oah6o","_id":"cjlqgwfvl0010estjqard2z6g"},{"post_id":"cjlqgwfv6000iestjr3hcf0ch","category_id":"cjlqgwfta0004estj4urpqog5","_id":"cjlqgwfvn0012estjxa3zfmd1"},{"post_id":"cjlqgwfv6000iestjr3hcf0ch","category_id":"cjlqgwfve000qestj50c7pgzy","_id":"cjlqgwfvn0013estjm5e73y61"},{"post_id":"cjlqgwfva000lestj3ahfkn7k","category_id":"cjlqgwfvi000uestjg68oah6o","_id":"cjlqgwfvo0014estjh8k2n6d4"},{"post_id":"cjlqgwfvd000oestjryndibhp","category_id":"cjlqgwfta0004estj4urpqog5","_id":"cjlqgwfvo0015estjxpn0zqcj"},{"post_id":"cjlqgwfvd000oestjryndibhp","category_id":"cjlqgwfve000qestj50c7pgzy","_id":"cjlqgwfvo0016estj5yy3j7dv"},{"post_id":"cjlqgwfsz0000estjzfretci2","category_id":"cjlqgxv640018estj5skqatdo","_id":"cjlqgxv650019estjcszwb1wx"}],"PostTag":[{"post_id":"cjlqgwftc0005estj3j2gvsaf","tag_id":"cjlqgwfty0009estjikyfb0hn","_id":"cjlqgwfv0000gestjmplwmdkn"},{"post_id":"cjlqgwftf0007estjk7w9tvom","tag_id":"cjlqgwfuu000eestjmlxr6zgf","_id":"cjlqgwfvc000nestjyft2qx6w"}],"Tag":[{"name":"protocol","_id":"cjlqgwfty0009estjikyfb0hn"},{"name":"java","_id":"cjlqgwfuu000eestjmlxr6zgf"}]}}